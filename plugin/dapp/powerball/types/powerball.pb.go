// Code generated by protoc-gen-go. DO NOT EDIT.
// source: powerball.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	powerball.proto

It has these top-level messages:
	PowerPurchaseRecord
	PurchaseInfo
	Powerball
	BallNumber
	PowerMissingRecord
	PowerballAction
	PowerballCreate
	PowerballBuy
	PowerballPause
	PowerballDraw
	PowerballClose
	ReceiptPowerball
	ReqPowerballInfo
	ReqPowerballBuyInfo
	ReqPowerballBuyHistory
	ReqPowerballLuckyInfo
	ReqPowerballLuckyHistory
	ReplyPowerballNormalInfo
	ReplyPowerballCurrentInfo
	ReplyPowerballHistoryLuckyNumber
	ReplyPowerballShowInfo
	PowerballNumberRecord
	PowerballBuyRecord
	PowerballBuyRecords
	PowerballDrawRecord
	PowerballDrawRecords
	PowerballUpdateRec
	PowerballUpdateRecs
	PowerballUpdateBuyInfo
	ReplyPowerballPurchaseAddr
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PowerPurchaseRecord struct {
	Amount int64       `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Number *BallNumber `protobuf:"bytes,2,opt,name=number" json:"number,omitempty"`
	Index  int64       `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *PowerPurchaseRecord) Reset()                    { *m = PowerPurchaseRecord{} }
func (m *PowerPurchaseRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerPurchaseRecord) ProtoMessage()               {}
func (*PowerPurchaseRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PowerPurchaseRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PowerPurchaseRecord) GetNumber() *BallNumber {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *PowerPurchaseRecord) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type PurchaseInfo struct {
	Addr           string                 `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Records        []*PowerPurchaseRecord `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
	FundWin        int64                  `protobuf:"varint,3,opt,name=fundWin" json:"fundWin,omitempty"`
	AmountOneRound int64                  `protobuf:"varint,4,opt,name=amountOneRound" json:"amountOneRound,omitempty"`
	PrizeOneRound  []int64                `protobuf:"varint,5,rep,packed,name=prizeOneRound" json:"prizeOneRound,omitempty"`
}

func (m *PurchaseInfo) Reset()                    { *m = PurchaseInfo{} }
func (m *PurchaseInfo) String() string            { return proto.CompactTextString(m) }
func (*PurchaseInfo) ProtoMessage()               {}
func (*PurchaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PurchaseInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *PurchaseInfo) GetRecords() []*PowerPurchaseRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *PurchaseInfo) GetFundWin() int64 {
	if m != nil {
		return m.FundWin
	}
	return 0
}

func (m *PurchaseInfo) GetAmountOneRound() int64 {
	if m != nil {
		return m.AmountOneRound
	}
	return 0
}

func (m *PurchaseInfo) GetPrizeOneRound() []int64 {
	if m != nil {
		return m.PrizeOneRound
	}
	return nil
}

type Powerball struct {
	PowerballID                string                `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
	Status                     int32                 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	CreateHeight               int64                 `protobuf:"varint,3,opt,name=createHeight" json:"createHeight,omitempty"`
	AccuFund                   int64                 `protobuf:"varint,4,opt,name=accuFund" json:"accuFund,omitempty"`
	SaleFund                   int64                 `protobuf:"varint,5,opt,name=saleFund" json:"saleFund,omitempty"`
	PurTime                    string                `protobuf:"bytes,6,opt,name=purTime" json:"purTime,omitempty"`
	DrawTime                   string                `protobuf:"bytes,7,opt,name=drawTime" json:"drawTime,omitempty"`
	LastTransToPurState        int64                 `protobuf:"varint,8,opt,name=lastTransToPurState" json:"lastTransToPurState,omitempty"`
	LastTransToDrawState       int64                 `protobuf:"varint,9,opt,name=lastTransToDrawState" json:"lastTransToDrawState,omitempty"`
	PurInfos                   []*PurchaseInfo       `protobuf:"bytes,10,rep,name=purInfos" json:"purInfos,omitempty"`
	TotalPurchasedTxNum        int64                 `protobuf:"varint,11,opt,name=totalPurchasedTxNum" json:"totalPurchasedTxNum,omitempty"`
	CreateAddr                 string                `protobuf:"bytes,12,opt,name=createAddr" json:"createAddr,omitempty"`
	Round                      int64                 `protobuf:"varint,13,opt,name=round" json:"round,omitempty"`
	LuckyNumber                *BallNumber           `protobuf:"bytes,14,opt,name=luckyNumber" json:"luckyNumber,omitempty"`
	CreateOnMain               int64                 `protobuf:"varint,15,opt,name=createOnMain" json:"createOnMain,omitempty"`
	LastTransToPurStateOnMain  int64                 `protobuf:"varint,16,opt,name=lastTransToPurStateOnMain" json:"lastTransToPurStateOnMain,omitempty"`
	LastTransToDrawStateOnMain int64                 `protobuf:"varint,17,opt,name=lastTransToDrawStateOnMain" json:"lastTransToDrawStateOnMain,omitempty"`
	MissingRecords             []*PowerMissingRecord `protobuf:"bytes,18,rep,name=missingRecords" json:"missingRecords,omitempty"`
	TicketPrice                int64                 `protobuf:"varint,19,opt,name=ticketPrice" json:"ticketPrice,omitempty"`
	PlatformRatio              int64                 `protobuf:"varint,20,opt,name=platformRatio" json:"platformRatio,omitempty"`
	DevelopRatio               int64                 `protobuf:"varint,21,opt,name=developRatio" json:"developRatio,omitempty"`
}

func (m *Powerball) Reset()                    { *m = Powerball{} }
func (m *Powerball) String() string            { return proto.CompactTextString(m) }
func (*Powerball) ProtoMessage()               {}
func (*Powerball) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Powerball) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

func (m *Powerball) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Powerball) GetCreateHeight() int64 {
	if m != nil {
		return m.CreateHeight
	}
	return 0
}

func (m *Powerball) GetAccuFund() int64 {
	if m != nil {
		return m.AccuFund
	}
	return 0
}

func (m *Powerball) GetSaleFund() int64 {
	if m != nil {
		return m.SaleFund
	}
	return 0
}

func (m *Powerball) GetPurTime() string {
	if m != nil {
		return m.PurTime
	}
	return ""
}

func (m *Powerball) GetDrawTime() string {
	if m != nil {
		return m.DrawTime
	}
	return ""
}

func (m *Powerball) GetLastTransToPurState() int64 {
	if m != nil {
		return m.LastTransToPurState
	}
	return 0
}

func (m *Powerball) GetLastTransToDrawState() int64 {
	if m != nil {
		return m.LastTransToDrawState
	}
	return 0
}

func (m *Powerball) GetPurInfos() []*PurchaseInfo {
	if m != nil {
		return m.PurInfos
	}
	return nil
}

func (m *Powerball) GetTotalPurchasedTxNum() int64 {
	if m != nil {
		return m.TotalPurchasedTxNum
	}
	return 0
}

func (m *Powerball) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

func (m *Powerball) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Powerball) GetLuckyNumber() *BallNumber {
	if m != nil {
		return m.LuckyNumber
	}
	return nil
}

func (m *Powerball) GetCreateOnMain() int64 {
	if m != nil {
		return m.CreateOnMain
	}
	return 0
}

func (m *Powerball) GetLastTransToPurStateOnMain() int64 {
	if m != nil {
		return m.LastTransToPurStateOnMain
	}
	return 0
}

func (m *Powerball) GetLastTransToDrawStateOnMain() int64 {
	if m != nil {
		return m.LastTransToDrawStateOnMain
	}
	return 0
}

func (m *Powerball) GetMissingRecords() []*PowerMissingRecord {
	if m != nil {
		return m.MissingRecords
	}
	return nil
}

func (m *Powerball) GetTicketPrice() int64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func (m *Powerball) GetPlatformRatio() int64 {
	if m != nil {
		return m.PlatformRatio
	}
	return 0
}

func (m *Powerball) GetDevelopRatio() int64 {
	if m != nil {
		return m.DevelopRatio
	}
	return 0
}

type BallNumber struct {
	Balls []string `protobuf:"bytes,1,rep,name=balls" json:"balls,omitempty"`
}

func (m *BallNumber) Reset()                    { *m = BallNumber{} }
func (m *BallNumber) String() string            { return proto.CompactTextString(m) }
func (*BallNumber) ProtoMessage()               {}
func (*BallNumber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BallNumber) GetBalls() []string {
	if m != nil {
		return m.Balls
	}
	return nil
}

type PowerMissingRecord struct {
	Times []int64 `protobuf:"varint,1,rep,packed,name=times" json:"times,omitempty"`
}

func (m *PowerMissingRecord) Reset()                    { *m = PowerMissingRecord{} }
func (m *PowerMissingRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerMissingRecord) ProtoMessage()               {}
func (*PowerMissingRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PowerMissingRecord) GetTimes() []int64 {
	if m != nil {
		return m.Times
	}
	return nil
}

type PowerballAction struct {
	// Types that are valid to be assigned to Value:
	//	*PowerballAction_Create
	//	*PowerballAction_Buy
	//	*PowerballAction_Pause
	//	*PowerballAction_Draw
	//	*PowerballAction_Close
	Value isPowerballAction_Value `protobuf_oneof:"value"`
	Ty    int32                   `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *PowerballAction) Reset()                    { *m = PowerballAction{} }
func (m *PowerballAction) String() string            { return proto.CompactTextString(m) }
func (*PowerballAction) ProtoMessage()               {}
func (*PowerballAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isPowerballAction_Value interface {
	isPowerballAction_Value()
}

type PowerballAction_Create struct {
	Create *PowerballCreate `protobuf:"bytes,1,opt,name=create,oneof"`
}
type PowerballAction_Buy struct {
	Buy *PowerballBuy `protobuf:"bytes,2,opt,name=buy,oneof"`
}
type PowerballAction_Pause struct {
	Pause *PowerballPause `protobuf:"bytes,3,opt,name=pause,oneof"`
}
type PowerballAction_Draw struct {
	Draw *PowerballDraw `protobuf:"bytes,4,opt,name=draw,oneof"`
}
type PowerballAction_Close struct {
	Close *PowerballClose `protobuf:"bytes,5,opt,name=close,oneof"`
}

func (*PowerballAction_Create) isPowerballAction_Value() {}
func (*PowerballAction_Buy) isPowerballAction_Value()    {}
func (*PowerballAction_Pause) isPowerballAction_Value()  {}
func (*PowerballAction_Draw) isPowerballAction_Value()   {}
func (*PowerballAction_Close) isPowerballAction_Value()  {}

func (m *PowerballAction) GetValue() isPowerballAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PowerballAction) GetCreate() *PowerballCreate {
	if x, ok := m.GetValue().(*PowerballAction_Create); ok {
		return x.Create
	}
	return nil
}

func (m *PowerballAction) GetBuy() *PowerballBuy {
	if x, ok := m.GetValue().(*PowerballAction_Buy); ok {
		return x.Buy
	}
	return nil
}

func (m *PowerballAction) GetPause() *PowerballPause {
	if x, ok := m.GetValue().(*PowerballAction_Pause); ok {
		return x.Pause
	}
	return nil
}

func (m *PowerballAction) GetDraw() *PowerballDraw {
	if x, ok := m.GetValue().(*PowerballAction_Draw); ok {
		return x.Draw
	}
	return nil
}

func (m *PowerballAction) GetClose() *PowerballClose {
	if x, ok := m.GetValue().(*PowerballAction_Close); ok {
		return x.Close
	}
	return nil
}

func (m *PowerballAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PowerballAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PowerballAction_OneofMarshaler, _PowerballAction_OneofUnmarshaler, _PowerballAction_OneofSizer, []interface{}{
		(*PowerballAction_Create)(nil),
		(*PowerballAction_Buy)(nil),
		(*PowerballAction_Pause)(nil),
		(*PowerballAction_Draw)(nil),
		(*PowerballAction_Close)(nil),
	}
}

func _PowerballAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PowerballAction)
	// value
	switch x := m.Value.(type) {
	case *PowerballAction_Create:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Create); err != nil {
			return err
		}
	case *PowerballAction_Buy:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Buy); err != nil {
			return err
		}
	case *PowerballAction_Pause:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pause); err != nil {
			return err
		}
	case *PowerballAction_Draw:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Draw); err != nil {
			return err
		}
	case *PowerballAction_Close:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Close); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PowerballAction.Value has unexpected type %T", x)
	}
	return nil
}

func _PowerballAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PowerballAction)
	switch tag {
	case 1: // value.create
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballCreate)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Create{msg}
		return true, err
	case 2: // value.buy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballBuy)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Buy{msg}
		return true, err
	case 3: // value.pause
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballPause)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Pause{msg}
		return true, err
	case 4: // value.draw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballDraw)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Draw{msg}
		return true, err
	case 5: // value.close
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballClose)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Close{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PowerballAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PowerballAction)
	// value
	switch x := m.Value.(type) {
	case *PowerballAction_Create:
		s := proto.Size(x.Create)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PowerballAction_Buy:
		s := proto.Size(x.Buy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PowerballAction_Pause:
		s := proto.Size(x.Pause)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PowerballAction_Draw:
		s := proto.Size(x.Draw)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PowerballAction_Close:
		s := proto.Size(x.Close)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PowerballCreate struct {
	PurTime       string `protobuf:"bytes,1,opt,name=purTime" json:"purTime,omitempty"`
	DrawTime      string `protobuf:"bytes,2,opt,name=drawTime" json:"drawTime,omitempty"`
	TicketPrice   int64  `protobuf:"varint,3,opt,name=ticketPrice" json:"ticketPrice,omitempty"`
	PlatformRatio int64  `protobuf:"varint,4,opt,name=platformRatio" json:"platformRatio,omitempty"`
	DevelopRatio  int64  `protobuf:"varint,5,opt,name=developRatio" json:"developRatio,omitempty"`
}

func (m *PowerballCreate) Reset()                    { *m = PowerballCreate{} }
func (m *PowerballCreate) String() string            { return proto.CompactTextString(m) }
func (*PowerballCreate) ProtoMessage()               {}
func (*PowerballCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PowerballCreate) GetPurTime() string {
	if m != nil {
		return m.PurTime
	}
	return ""
}

func (m *PowerballCreate) GetDrawTime() string {
	if m != nil {
		return m.DrawTime
	}
	return ""
}

func (m *PowerballCreate) GetTicketPrice() int64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func (m *PowerballCreate) GetPlatformRatio() int64 {
	if m != nil {
		return m.PlatformRatio
	}
	return 0
}

func (m *PowerballCreate) GetDevelopRatio() int64 {
	if m != nil {
		return m.DevelopRatio
	}
	return 0
}

type PowerballBuy struct {
	PowerballID string      `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
	Amount      int64       `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Number      *BallNumber `protobuf:"bytes,3,opt,name=number" json:"number,omitempty"`
}

func (m *PowerballBuy) Reset()                    { *m = PowerballBuy{} }
func (m *PowerballBuy) String() string            { return proto.CompactTextString(m) }
func (*PowerballBuy) ProtoMessage()               {}
func (*PowerballBuy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PowerballBuy) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

func (m *PowerballBuy) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PowerballBuy) GetNumber() *BallNumber {
	if m != nil {
		return m.Number
	}
	return nil
}

type PowerballPause struct {
	PowerballID string `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
}

func (m *PowerballPause) Reset()                    { *m = PowerballPause{} }
func (m *PowerballPause) String() string            { return proto.CompactTextString(m) }
func (*PowerballPause) ProtoMessage()               {}
func (*PowerballPause) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PowerballPause) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

type PowerballDraw struct {
	PowerballID string `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
}

func (m *PowerballDraw) Reset()                    { *m = PowerballDraw{} }
func (m *PowerballDraw) String() string            { return proto.CompactTextString(m) }
func (*PowerballDraw) ProtoMessage()               {}
func (*PowerballDraw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PowerballDraw) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

type PowerballClose struct {
	PowerballID string `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
}

func (m *PowerballClose) Reset()                    { *m = PowerballClose{} }
func (m *PowerballClose) String() string            { return proto.CompactTextString(m) }
func (*PowerballClose) ProtoMessage()               {}
func (*PowerballClose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PowerballClose) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

type ReceiptPowerball struct {
	PowerballID string                  `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
	Status      int32                   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	PrevStatus  int32                   `protobuf:"varint,3,opt,name=prevStatus" json:"prevStatus,omitempty"`
	Addr        string                  `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Round       int64                   `protobuf:"varint,5,opt,name=round" json:"round,omitempty"`
	Number      *BallNumber             `protobuf:"bytes,6,opt,name=number" json:"number,omitempty"`
	Amount      int64                   `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
	LuckyNumber *BallNumber             `protobuf:"bytes,8,opt,name=luckyNumber" json:"luckyNumber,omitempty"`
	Time        int64                   `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	TxHash      string                  `protobuf:"bytes,10,opt,name=txHash" json:"txHash,omitempty"`
	UpdateInfo  *PowerballUpdateBuyInfo `protobuf:"bytes,11,opt,name=updateInfo" json:"updateInfo,omitempty"`
	Index       int64                   `protobuf:"varint,12,opt,name=index" json:"index,omitempty"`
}

func (m *ReceiptPowerball) Reset()                    { *m = ReceiptPowerball{} }
func (m *ReceiptPowerball) String() string            { return proto.CompactTextString(m) }
func (*ReceiptPowerball) ProtoMessage()               {}
func (*ReceiptPowerball) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReceiptPowerball) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

func (m *ReceiptPowerball) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReceiptPowerball) GetPrevStatus() int32 {
	if m != nil {
		return m.PrevStatus
	}
	return 0
}

func (m *ReceiptPowerball) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptPowerball) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReceiptPowerball) GetNumber() *BallNumber {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *ReceiptPowerball) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReceiptPowerball) GetLuckyNumber() *BallNumber {
	if m != nil {
		return m.LuckyNumber
	}
	return nil
}

func (m *ReceiptPowerball) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ReceiptPowerball) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReceiptPowerball) GetUpdateInfo() *PowerballUpdateBuyInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

func (m *ReceiptPowerball) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReqPowerballInfo struct {
	PowerballID string `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
}

func (m *ReqPowerballInfo) Reset()                    { *m = ReqPowerballInfo{} }
func (m *ReqPowerballInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballInfo) ProtoMessage()               {}
func (*ReqPowerballInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReqPowerballInfo) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

type ReqPowerballBuyInfo struct {
	PowerballID string `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
	Addr        string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Round       int64  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
}

func (m *ReqPowerballBuyInfo) Reset()                    { *m = ReqPowerballBuyInfo{} }
func (m *ReqPowerballBuyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballBuyInfo) ProtoMessage()               {}
func (*ReqPowerballBuyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReqPowerballBuyInfo) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

func (m *ReqPowerballBuyInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqPowerballBuyInfo) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type ReqPowerballBuyHistory struct {
	PowerballID string `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
	Addr        string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Round       int64  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Count       int32  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Direction   int32  `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
	Index       int64  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
}

func (m *ReqPowerballBuyHistory) Reset()                    { *m = ReqPowerballBuyHistory{} }
func (m *ReqPowerballBuyHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballBuyHistory) ProtoMessage()               {}
func (*ReqPowerballBuyHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReqPowerballBuyHistory) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

func (m *ReqPowerballBuyHistory) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqPowerballBuyHistory) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReqPowerballBuyHistory) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqPowerballBuyHistory) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqPowerballBuyHistory) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReqPowerballLuckyInfo struct {
	PowerballID string  `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
	Round       []int64 `protobuf:"varint,2,rep,packed,name=round" json:"round,omitempty"`
}

func (m *ReqPowerballLuckyInfo) Reset()                    { *m = ReqPowerballLuckyInfo{} }
func (m *ReqPowerballLuckyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballLuckyInfo) ProtoMessage()               {}
func (*ReqPowerballLuckyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReqPowerballLuckyInfo) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

func (m *ReqPowerballLuckyInfo) GetRound() []int64 {
	if m != nil {
		return m.Round
	}
	return nil
}

type ReqPowerballLuckyHistory struct {
	PowerballID string `protobuf:"bytes,1,opt,name=powerballID" json:"powerballID,omitempty"`
	Round       int64  `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Count       int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction   int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
}

func (m *ReqPowerballLuckyHistory) Reset()                    { *m = ReqPowerballLuckyHistory{} }
func (m *ReqPowerballLuckyHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballLuckyHistory) ProtoMessage()               {}
func (*ReqPowerballLuckyHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReqPowerballLuckyHistory) GetPowerballID() string {
	if m != nil {
		return m.PowerballID
	}
	return ""
}

func (m *ReqPowerballLuckyHistory) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReqPowerballLuckyHistory) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqPowerballLuckyHistory) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type ReplyPowerballNormalInfo struct {
	CreateHeight  int64  `protobuf:"varint,1,opt,name=createHeight" json:"createHeight,omitempty"`
	PurTime       string `protobuf:"bytes,2,opt,name=purTime" json:"purTime,omitempty"`
	DrawTime      string `protobuf:"bytes,3,opt,name=drawTime" json:"drawTime,omitempty"`
	TicketPrice   int64  `protobuf:"varint,4,opt,name=ticketPrice" json:"ticketPrice,omitempty"`
	PlatformRatio int64  `protobuf:"varint,5,opt,name=platformRatio" json:"platformRatio,omitempty"`
	DevelopRatio  int64  `protobuf:"varint,6,opt,name=developRatio" json:"developRatio,omitempty"`
	CreateAddr    string `protobuf:"bytes,7,opt,name=createAddr" json:"createAddr,omitempty"`
}

func (m *ReplyPowerballNormalInfo) Reset()                    { *m = ReplyPowerballNormalInfo{} }
func (m *ReplyPowerballNormalInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballNormalInfo) ProtoMessage()               {}
func (*ReplyPowerballNormalInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ReplyPowerballNormalInfo) GetCreateHeight() int64 {
	if m != nil {
		return m.CreateHeight
	}
	return 0
}

func (m *ReplyPowerballNormalInfo) GetPurTime() string {
	if m != nil {
		return m.PurTime
	}
	return ""
}

func (m *ReplyPowerballNormalInfo) GetDrawTime() string {
	if m != nil {
		return m.DrawTime
	}
	return ""
}

func (m *ReplyPowerballNormalInfo) GetTicketPrice() int64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func (m *ReplyPowerballNormalInfo) GetPlatformRatio() int64 {
	if m != nil {
		return m.PlatformRatio
	}
	return 0
}

func (m *ReplyPowerballNormalInfo) GetDevelopRatio() int64 {
	if m != nil {
		return m.DevelopRatio
	}
	return 0
}

func (m *ReplyPowerballNormalInfo) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

type ReplyPowerballCurrentInfo struct {
	Status                     int32                 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	AccuFund                   int64                 `protobuf:"varint,2,opt,name=accuFund" json:"accuFund,omitempty"`
	SaleFund                   int64                 `protobuf:"varint,3,opt,name=saleFund" json:"saleFund,omitempty"`
	LastTransToPurState        int64                 `protobuf:"varint,4,opt,name=lastTransToPurState" json:"lastTransToPurState,omitempty"`
	LastTransToDrawState       int64                 `protobuf:"varint,5,opt,name=lastTransToDrawState" json:"lastTransToDrawState,omitempty"`
	TotalPurchasedTxNum        int64                 `protobuf:"varint,6,opt,name=totalPurchasedTxNum" json:"totalPurchasedTxNum,omitempty"`
	Round                      int64                 `protobuf:"varint,7,opt,name=round" json:"round,omitempty"`
	LuckyNumber                *BallNumber           `protobuf:"bytes,8,opt,name=luckyNumber" json:"luckyNumber,omitempty"`
	LastTransToPurStateOnMain  int64                 `protobuf:"varint,9,opt,name=lastTransToPurStateOnMain" json:"lastTransToPurStateOnMain,omitempty"`
	LastTransToDrawStateOnMain int64                 `protobuf:"varint,10,opt,name=lastTransToDrawStateOnMain" json:"lastTransToDrawStateOnMain,omitempty"`
	PurTime                    string                `protobuf:"bytes,11,opt,name=purTime" json:"purTime,omitempty"`
	DrawTime                   string                `protobuf:"bytes,12,opt,name=drawTime" json:"drawTime,omitempty"`
	MissingRecords             []*PowerMissingRecord `protobuf:"bytes,13,rep,name=missingRecords" json:"missingRecords,omitempty"`
}

func (m *ReplyPowerballCurrentInfo) Reset()                    { *m = ReplyPowerballCurrentInfo{} }
func (m *ReplyPowerballCurrentInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballCurrentInfo) ProtoMessage()               {}
func (*ReplyPowerballCurrentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReplyPowerballCurrentInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetAccuFund() int64 {
	if m != nil {
		return m.AccuFund
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetSaleFund() int64 {
	if m != nil {
		return m.SaleFund
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToPurState() int64 {
	if m != nil {
		return m.LastTransToPurState
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToDrawState() int64 {
	if m != nil {
		return m.LastTransToDrawState
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetTotalPurchasedTxNum() int64 {
	if m != nil {
		return m.TotalPurchasedTxNum
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLuckyNumber() *BallNumber {
	if m != nil {
		return m.LuckyNumber
	}
	return nil
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToPurStateOnMain() int64 {
	if m != nil {
		return m.LastTransToPurStateOnMain
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToDrawStateOnMain() int64 {
	if m != nil {
		return m.LastTransToDrawStateOnMain
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetPurTime() string {
	if m != nil {
		return m.PurTime
	}
	return ""
}

func (m *ReplyPowerballCurrentInfo) GetDrawTime() string {
	if m != nil {
		return m.DrawTime
	}
	return ""
}

func (m *ReplyPowerballCurrentInfo) GetMissingRecords() []*PowerMissingRecord {
	if m != nil {
		return m.MissingRecords
	}
	return nil
}

type ReplyPowerballHistoryLuckyNumber struct {
	LuckyNumber []*BallNumber `protobuf:"bytes,1,rep,name=luckyNumber" json:"luckyNumber,omitempty"`
}

func (m *ReplyPowerballHistoryLuckyNumber) Reset()         { *m = ReplyPowerballHistoryLuckyNumber{} }
func (m *ReplyPowerballHistoryLuckyNumber) String() string { return proto.CompactTextString(m) }
func (*ReplyPowerballHistoryLuckyNumber) ProtoMessage()    {}
func (*ReplyPowerballHistoryLuckyNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *ReplyPowerballHistoryLuckyNumber) GetLuckyNumber() []*BallNumber {
	if m != nil {
		return m.LuckyNumber
	}
	return nil
}

type ReplyPowerballShowInfo struct {
	Records []*PowerballBuyRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *ReplyPowerballShowInfo) Reset()                    { *m = ReplyPowerballShowInfo{} }
func (m *ReplyPowerballShowInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballShowInfo) ProtoMessage()               {}
func (*ReplyPowerballShowInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReplyPowerballShowInfo) GetRecords() []*PowerballBuyRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballNumberRecord struct {
	Number *BallNumber `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Amount int64       `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *PowerballNumberRecord) Reset()                    { *m = PowerballNumberRecord{} }
func (m *PowerballNumberRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerballNumberRecord) ProtoMessage()               {}
func (*PowerballNumberRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PowerballNumberRecord) GetNumber() *BallNumber {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *PowerballNumberRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// used for execlocal
type PowerballBuyRecord struct {
	Number *BallNumber `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Amount int64       `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Round  int64       `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Type   int32       `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Index  int64       `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Time   int64       `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	TxHash string      `protobuf:"bytes,7,opt,name=txHash" json:"txHash,omitempty"`
}

func (m *PowerballBuyRecord) Reset()                    { *m = PowerballBuyRecord{} }
func (m *PowerballBuyRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerballBuyRecord) ProtoMessage()               {}
func (*PowerballBuyRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PowerballBuyRecord) GetNumber() *BallNumber {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *PowerballBuyRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PowerballBuyRecord) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PowerballBuyRecord) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PowerballBuyRecord) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PowerballBuyRecord) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PowerballBuyRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type PowerballBuyRecords struct {
	Records []*PowerballBuyRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *PowerballBuyRecords) Reset()                    { *m = PowerballBuyRecords{} }
func (m *PowerballBuyRecords) String() string            { return proto.CompactTextString(m) }
func (*PowerballBuyRecords) ProtoMessage()               {}
func (*PowerballBuyRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PowerballBuyRecords) GetRecords() []*PowerballBuyRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballDrawRecord struct {
	Number *BallNumber `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Round  int64       `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Time   int64       `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	TxHash string      `protobuf:"bytes,4,opt,name=txHash" json:"txHash,omitempty"`
}

func (m *PowerballDrawRecord) Reset()                    { *m = PowerballDrawRecord{} }
func (m *PowerballDrawRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerballDrawRecord) ProtoMessage()               {}
func (*PowerballDrawRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *PowerballDrawRecord) GetNumber() *BallNumber {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *PowerballDrawRecord) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PowerballDrawRecord) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PowerballDrawRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type PowerballDrawRecords struct {
	Records []*PowerballDrawRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *PowerballDrawRecords) Reset()                    { *m = PowerballDrawRecords{} }
func (m *PowerballDrawRecords) String() string            { return proto.CompactTextString(m) }
func (*PowerballDrawRecords) ProtoMessage()               {}
func (*PowerballDrawRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *PowerballDrawRecords) GetRecords() []*PowerballDrawRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballUpdateRec struct {
	Index int64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Type  int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *PowerballUpdateRec) Reset()                    { *m = PowerballUpdateRec{} }
func (m *PowerballUpdateRec) String() string            { return proto.CompactTextString(m) }
func (*PowerballUpdateRec) ProtoMessage()               {}
func (*PowerballUpdateRec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PowerballUpdateRec) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PowerballUpdateRec) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type PowerballUpdateRecs struct {
	Addr    string                `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Records []*PowerballUpdateRec `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
}

func (m *PowerballUpdateRecs) Reset()                    { *m = PowerballUpdateRecs{} }
func (m *PowerballUpdateRecs) String() string            { return proto.CompactTextString(m) }
func (*PowerballUpdateRecs) ProtoMessage()               {}
func (*PowerballUpdateRecs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PowerballUpdateRecs) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *PowerballUpdateRecs) GetRecords() []*PowerballUpdateRec {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballUpdateBuyInfo struct {
	Updates []*PowerballUpdateRecs `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
}

func (m *PowerballUpdateBuyInfo) Reset()                    { *m = PowerballUpdateBuyInfo{} }
func (m *PowerballUpdateBuyInfo) String() string            { return proto.CompactTextString(m) }
func (*PowerballUpdateBuyInfo) ProtoMessage()               {}
func (*PowerballUpdateBuyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PowerballUpdateBuyInfo) GetUpdates() []*PowerballUpdateRecs {
	if m != nil {
		return m.Updates
	}
	return nil
}

type ReplyPowerballPurchaseAddr struct {
	Address []string `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (m *ReplyPowerballPurchaseAddr) Reset()                    { *m = ReplyPowerballPurchaseAddr{} }
func (m *ReplyPowerballPurchaseAddr) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballPurchaseAddr) ProtoMessage()               {}
func (*ReplyPowerballPurchaseAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ReplyPowerballPurchaseAddr) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*PowerPurchaseRecord)(nil), "types.PowerPurchaseRecord")
	proto.RegisterType((*PurchaseInfo)(nil), "types.PurchaseInfo")
	proto.RegisterType((*Powerball)(nil), "types.Powerball")
	proto.RegisterType((*BallNumber)(nil), "types.BallNumber")
	proto.RegisterType((*PowerMissingRecord)(nil), "types.PowerMissingRecord")
	proto.RegisterType((*PowerballAction)(nil), "types.PowerballAction")
	proto.RegisterType((*PowerballCreate)(nil), "types.PowerballCreate")
	proto.RegisterType((*PowerballBuy)(nil), "types.PowerballBuy")
	proto.RegisterType((*PowerballPause)(nil), "types.PowerballPause")
	proto.RegisterType((*PowerballDraw)(nil), "types.PowerballDraw")
	proto.RegisterType((*PowerballClose)(nil), "types.PowerballClose")
	proto.RegisterType((*ReceiptPowerball)(nil), "types.ReceiptPowerball")
	proto.RegisterType((*ReqPowerballInfo)(nil), "types.ReqPowerballInfo")
	proto.RegisterType((*ReqPowerballBuyInfo)(nil), "types.ReqPowerballBuyInfo")
	proto.RegisterType((*ReqPowerballBuyHistory)(nil), "types.ReqPowerballBuyHistory")
	proto.RegisterType((*ReqPowerballLuckyInfo)(nil), "types.ReqPowerballLuckyInfo")
	proto.RegisterType((*ReqPowerballLuckyHistory)(nil), "types.ReqPowerballLuckyHistory")
	proto.RegisterType((*ReplyPowerballNormalInfo)(nil), "types.ReplyPowerballNormalInfo")
	proto.RegisterType((*ReplyPowerballCurrentInfo)(nil), "types.ReplyPowerballCurrentInfo")
	proto.RegisterType((*ReplyPowerballHistoryLuckyNumber)(nil), "types.ReplyPowerballHistoryLuckyNumber")
	proto.RegisterType((*ReplyPowerballShowInfo)(nil), "types.ReplyPowerballShowInfo")
	proto.RegisterType((*PowerballNumberRecord)(nil), "types.PowerballNumberRecord")
	proto.RegisterType((*PowerballBuyRecord)(nil), "types.PowerballBuyRecord")
	proto.RegisterType((*PowerballBuyRecords)(nil), "types.PowerballBuyRecords")
	proto.RegisterType((*PowerballDrawRecord)(nil), "types.PowerballDrawRecord")
	proto.RegisterType((*PowerballDrawRecords)(nil), "types.PowerballDrawRecords")
	proto.RegisterType((*PowerballUpdateRec)(nil), "types.PowerballUpdateRec")
	proto.RegisterType((*PowerballUpdateRecs)(nil), "types.PowerballUpdateRecs")
	proto.RegisterType((*PowerballUpdateBuyInfo)(nil), "types.PowerballUpdateBuyInfo")
	proto.RegisterType((*ReplyPowerballPurchaseAddr)(nil), "types.ReplyPowerballPurchaseAddr")
}

func init() { proto.RegisterFile("powerball.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0x8e, 0xed, 0xfd, 0xc9, 0x9e, 0x4d, 0xd2, 0x76, 0xf2, 0x23, 0x27, 0x82, 0x6a, 0x65, 0x21,
	0x08, 0x95, 0x28, 0x65, 0x53, 0x71, 0x05, 0x95, 0x9a, 0x56, 0x55, 0x8a, 0xda, 0x34, 0x72, 0x83,
	0x2a, 0x71, 0x81, 0x34, 0xf1, 0x4e, 0x1b, 0xab, 0x5e, 0xdb, 0x8c, 0xc7, 0x4d, 0x97, 0x2b, 0xc4,
	0x05, 0xb7, 0x7d, 0x13, 0x6e, 0x78, 0x01, 0x24, 0xc4, 0x5b, 0xf0, 0x30, 0x68, 0xce, 0xf8, 0x67,
	0xec, 0xd8, 0x59, 0x17, 0x7a, 0xb7, 0x33, 0x73, 0x66, 0xe6, 0xcc, 0x77, 0xce, 0xf9, 0xce, 0xb7,
	0x86, 0x6b, 0x71, 0x74, 0xc1, 0xf8, 0x19, 0x0d, 0x82, 0xdb, 0x31, 0x8f, 0x44, 0x44, 0xfa, 0x62,
	0x11, 0xb3, 0xc4, 0x09, 0x61, 0xf3, 0x44, 0xae, 0x9c, 0xa4, 0xdc, 0x3b, 0xa7, 0x09, 0x73, 0x99,
	0x17, 0xf1, 0x19, 0xd9, 0x81, 0x01, 0x9d, 0x47, 0x69, 0x28, 0x6c, 0x63, 0x62, 0xec, 0x5b, 0x6e,
	0x36, 0x22, 0x9f, 0xc3, 0x20, 0x4c, 0xe7, 0x67, 0x8c, 0xdb, 0xe6, 0xc4, 0xd8, 0x1f, 0x4f, 0x6f,
	0xdc, 0xc6, 0x63, 0x6e, 0x1f, 0xd2, 0x20, 0x38, 0xc6, 0x05, 0x37, 0x33, 0x20, 0x5b, 0xd0, 0xf7,
	0xc3, 0x19, 0x7b, 0x6b, 0x5b, 0x78, 0x82, 0x1a, 0x38, 0x7f, 0x1a, 0xb0, 0x96, 0xdf, 0xf5, 0x38,
	0x7c, 0x19, 0x11, 0x02, 0x3d, 0x3a, 0x9b, 0x71, 0xbc, 0x67, 0xe4, 0xe2, 0x6f, 0x72, 0x17, 0x86,
	0x1c, 0xfd, 0x48, 0x6c, 0x73, 0x62, 0xed, 0x8f, 0xa7, 0x7b, 0xd9, 0x35, 0x0d, 0xae, 0xba, 0xb9,
	0x29, 0xb1, 0x61, 0xf8, 0x32, 0x0d, 0x67, 0x2f, 0xfc, 0x30, 0xbb, 0x32, 0x1f, 0x92, 0x4f, 0x61,
	0x43, 0xf9, 0xff, 0x2c, 0x64, 0x6e, 0x94, 0x86, 0x33, 0xbb, 0x87, 0x06, 0xb5, 0x59, 0xf2, 0x09,
	0xac, 0xc7, 0xdc, 0xff, 0x99, 0x15, 0x66, 0xfd, 0x89, 0xb5, 0x6f, 0xb9, 0xd5, 0x49, 0xe7, 0x9f,
	0x01, 0x8c, 0x4e, 0x72, 0x34, 0xc9, 0x04, 0xc6, 0x05, 0xb4, 0x8f, 0x1f, 0x66, 0xcf, 0xd0, 0xa7,
	0x24, 0x96, 0x89, 0xa0, 0x22, 0x4d, 0x10, 0xb3, 0xbe, 0x9b, 0x8d, 0x88, 0x03, 0x6b, 0x1e, 0x67,
	0x54, 0xb0, 0x23, 0xe6, 0xbf, 0x3a, 0x17, 0x99, 0xd3, 0x95, 0x39, 0xb2, 0x07, 0xab, 0xd4, 0xf3,
	0xd2, 0x47, 0xa5, 0xcf, 0xc5, 0x58, 0xae, 0x25, 0x34, 0x60, 0x8f, 0x94, 0xa3, 0xb8, 0x96, 0x8f,
	0x25, 0x16, 0x71, 0xca, 0x4f, 0xfd, 0x39, 0xb3, 0x07, 0xe8, 0x51, 0x3e, 0x94, 0xbb, 0x66, 0x9c,
	0x5e, 0xe0, 0xd2, 0x10, 0x97, 0x8a, 0x31, 0xb9, 0x03, 0x9b, 0x01, 0x4d, 0xc4, 0x29, 0xa7, 0x61,
	0x72, 0x1a, 0x9d, 0xa4, 0xfc, 0xb9, 0xa0, 0x82, 0xd9, 0xab, 0x78, 0x78, 0xd3, 0x12, 0x99, 0xc2,
	0x96, 0x36, 0xfd, 0x90, 0xd3, 0x0b, 0xb5, 0x65, 0x84, 0x5b, 0x1a, 0xd7, 0xc8, 0x97, 0xb0, 0x1a,
	0xa7, 0x5c, 0x06, 0x3f, 0xb1, 0x01, 0xc3, 0xbb, 0x99, 0x87, 0x57, 0x4b, 0x0c, 0xb7, 0x30, 0x92,
	0x6e, 0x89, 0x48, 0xd0, 0x20, 0x5f, 0x9e, 0x9d, 0xbe, 0x3d, 0x4e, 0xe7, 0xf6, 0x58, 0xb9, 0xd5,
	0xb0, 0x44, 0x6e, 0x02, 0x28, 0x18, 0xef, 0xcb, 0xd4, 0x5a, 0xc3, 0x67, 0x6a, 0x33, 0x32, 0x37,
	0x39, 0x06, 0x78, 0x5d, 0xe5, 0x26, 0x0e, 0xc8, 0x01, 0x8c, 0x83, 0xd4, 0x7b, 0xbd, 0x50, 0x89,
	0x6c, 0x6f, 0xb4, 0x65, 0xb8, 0x6e, 0x55, 0x46, 0xf1, 0x59, 0xf8, 0x94, 0xfa, 0xa1, 0x7d, 0x4d,
	0x8f, 0xa2, 0x9a, 0x23, 0xdf, 0xc0, 0x6e, 0x03, 0x78, 0xd9, 0x86, 0xeb, 0xb8, 0xa1, 0xdd, 0x80,
	0xdc, 0x83, 0xbd, 0x26, 0x1c, 0xb3, 0xed, 0x37, 0x70, 0xfb, 0x15, 0x16, 0xe4, 0x3e, 0x6c, 0xcc,
	0xfd, 0x24, 0xf1, 0xc3, 0x57, 0x6e, 0x56, 0x54, 0x04, 0x51, 0xdf, 0xd5, 0x8b, 0xea, 0xa9, 0x6e,
	0xe1, 0xd6, 0x36, 0xc8, 0x24, 0x17, 0xbe, 0xf7, 0x9a, 0x89, 0x13, 0xee, 0x7b, 0xcc, 0xde, 0xc4,
	0x3b, 0xf5, 0x29, 0x2c, 0x9d, 0x80, 0x8a, 0x97, 0x11, 0x9f, 0xbb, 0x54, 0xf8, 0x91, 0xbd, 0x85,
	0x36, 0xd5, 0x49, 0x09, 0xd6, 0x8c, 0xbd, 0x61, 0x41, 0x14, 0x2b, 0xa3, 0x6d, 0x05, 0x96, 0x3e,
	0xe7, 0x38, 0x00, 0x25, 0xd6, 0x32, 0x52, 0xb2, 0x8c, 0x12, 0xdb, 0x98, 0x58, 0xfb, 0x23, 0x57,
	0x0d, 0x9c, 0x5b, 0x40, 0x2e, 0x7b, 0x2d, 0x6d, 0x85, 0x3f, 0x67, 0xca, 0xd6, 0x72, 0xd5, 0xc0,
	0x79, 0x67, 0xc2, 0xb5, 0xa2, 0x5c, 0xef, 0x7b, 0xc2, 0x8f, 0x42, 0x72, 0x07, 0x06, 0x2a, 0x40,
	0x58, 0xaf, 0xe3, 0xe9, 0x8e, 0x0e, 0x85, 0xb4, 0x7b, 0xa0, 0x8a, 0x70, 0xc5, 0xcd, 0xec, 0xc8,
	0x67, 0x60, 0x9d, 0xa5, 0x8b, 0x8c, 0xf5, 0x36, 0xeb, 0xe6, 0x87, 0xe9, 0xe2, 0x68, 0xc5, 0x95,
	0x16, 0xe4, 0x0b, 0xe8, 0xc7, 0x34, 0x4d, 0x18, 0x96, 0xf3, 0x78, 0xba, 0x5d, 0x37, 0x3d, 0x91,
	0x8b, 0x47, 0x2b, 0xae, 0xb2, 0x22, 0xb7, 0xa0, 0x27, 0xcb, 0x0f, 0x8b, 0x7b, 0x3c, 0xdd, 0xaa,
	0x5b, 0xcb, 0x58, 0x1e, 0xad, 0xb8, 0x68, 0x23, 0x8f, 0xf6, 0x82, 0x28, 0x61, 0x58, 0xed, 0x0d,
	0x47, 0x3f, 0x90, 0x8b, 0xf2, 0x68, 0xb4, 0x22, 0x1b, 0x60, 0x8a, 0x85, 0x0d, 0xc8, 0x39, 0xa6,
	0x58, 0x1c, 0x0e, 0xa1, 0xff, 0x86, 0x06, 0x29, 0x73, 0xfe, 0x30, 0x34, 0x44, 0xd4, 0x4b, 0x75,
	0xc2, 0x30, 0xda, 0x09, 0xc3, 0xac, 0x11, 0x46, 0x2d, 0x2f, 0xac, 0x0e, 0x79, 0xd1, 0xeb, 0x92,
	0x17, 0xfd, 0x86, 0xbc, 0x48, 0x60, 0x4d, 0xc7, 0xbb, 0x1b, 0xf1, 0x66, 0x4d, 0xcc, 0x6c, 0x69,
	0x62, 0xd6, 0x92, 0x26, 0xe6, 0x4c, 0x61, 0xa3, 0x1a, 0xb9, 0xe5, 0xd7, 0x3a, 0x5f, 0xc1, 0x7a,
	0x25, 0x7e, 0x1d, 0xb6, 0xe8, 0xd7, 0x60, 0x14, 0x3b, 0xec, 0x79, 0x67, 0xc1, 0x75, 0x97, 0x79,
	0xcc, 0x8f, 0xc5, 0x87, 0xe8, 0x46, 0x37, 0x01, 0x62, 0xce, 0xde, 0x3c, 0x57, 0x6b, 0x16, 0xae,
	0x69, 0x33, 0x45, 0x9f, 0xee, 0x69, 0x7d, 0xba, 0xa0, 0xd1, 0xbe, 0x4e, 0xa3, 0x25, 0xbc, 0x83,
	0x65, 0x1a, 0xa1, 0x8c, 0xd0, 0xb0, 0x12, 0xa1, 0x1a, 0x13, 0xaf, 0x76, 0x62, 0x62, 0x02, 0x3d,
	0x59, 0xf1, 0x59, 0xef, 0xc1, 0xdf, 0xf2, 0x02, 0xf1, 0xf6, 0x88, 0x26, 0xe7, 0x58, 0x07, 0x23,
	0x37, 0x1b, 0x91, 0x6f, 0x01, 0xd2, 0x78, 0x46, 0x05, 0xb6, 0x1a, 0xec, 0x24, 0xe3, 0xe9, 0xc7,
	0xf5, 0x7a, 0xfa, 0x1e, 0x2d, 0x0e, 0xd3, 0x05, 0xf6, 0x23, 0x6d, 0x43, 0xa9, 0x6d, 0xd6, 0x74,
	0x6d, 0x73, 0x57, 0x06, 0xe4, 0xa7, 0x62, 0x3b, 0x5a, 0x2e, 0x8f, 0x23, 0x85, 0x4d, 0x7d, 0x57,
	0x76, 0x5d, 0x87, 0x48, 0xe6, 0x11, 0x31, 0x9b, 0x22, 0x62, 0x69, 0x11, 0x71, 0x7e, 0x37, 0x60,
	0xa7, 0x76, 0xc7, 0x91, 0x9f, 0x88, 0x88, 0x2f, 0x3e, 0xe4, 0x35, 0x72, 0xd6, 0xc3, 0x60, 0xf6,
	0x30, 0x7b, 0xd4, 0x80, 0x7c, 0x04, 0xa3, 0x99, 0xcf, 0x19, 0x12, 0x2f, 0x26, 0x4a, 0xdf, 0x2d,
	0x27, 0x4a, 0x24, 0x07, 0x3a, 0x92, 0xcf, 0x60, 0x5b, 0xf7, 0xf7, 0x89, 0x8c, 0x72, 0x47, 0x54,
	0x0a, 0xd7, 0x4c, 0xd5, 0x04, 0x14, 0x02, 0xbf, 0x19, 0x60, 0x5f, 0x3a, 0xb1, 0x3b, 0x06, 0xda,
	0xa1, 0x4d, 0xef, 0xb5, 0x5a, 0xdf, 0xdb, 0xab, 0xbd, 0xd7, 0xf9, 0xc5, 0x94, 0x8e, 0xc4, 0xc1,
	0xa2, 0x70, 0xe5, 0x38, 0xe2, 0x73, 0xaa, 0x92, 0xa5, 0xae, 0x08, 0x8d, 0x06, 0x45, 0xa8, 0x11,
	0xb5, 0xd9, 0x4e, 0xd4, 0xd6, 0xd5, 0x44, 0xdd, 0xeb, 0x40, 0xd4, 0xfd, 0x2e, 0x44, 0x3d, 0xb8,
	0x4c, 0xd4, 0x35, 0xf1, 0x35, 0xac, 0x8b, 0x2f, 0xe7, 0xef, 0x1e, 0xec, 0x56, 0x21, 0x78, 0x90,
	0x72, 0xce, 0x42, 0x81, 0x18, 0x94, 0xfc, 0x64, 0x54, 0xf8, 0x49, 0x57, 0xc2, 0xe6, 0x15, 0x4a,
	0xd8, 0xaa, 0x29, 0xe1, 0x16, 0x4d, 0xdb, 0x7b, 0x7f, 0x4d, 0xdb, 0xbf, 0x42, 0xd3, 0xb6, 0x48,
	0xd4, 0x41, 0xbb, 0x44, 0x2d, 0x52, 0x6a, 0x78, 0x85, 0x04, 0xed, 0x46, 0x7c, 0x57, 0xca, 0xcb,
	0xd1, 0xff, 0x93, 0x97, 0xb0, 0x54, 0x5e, 0x6a, 0x09, 0x39, 0x6e, 0x4f, 0xc8, 0xb5, 0x5a, 0x42,
	0x5e, 0x16, 0xa5, 0xeb, 0xef, 0x29, 0x4a, 0x9d, 0x17, 0x30, 0xa9, 0xa6, 0x51, 0x56, 0xcf, 0x4f,
	0x34, 0x68, 0x6a, 0x78, 0x1a, 0x78, 0xc7, 0x12, 0x3c, 0x9d, 0xa7, 0x92, 0x2d, 0xf5, 0x83, 0x9f,
	0x9f, 0x47, 0x17, 0x98, 0x9c, 0x07, 0xe5, 0x1f, 0x53, 0xe3, 0xb2, 0xbb, 0x19, 0xb5, 0xd6, 0xfe,
	0x97, 0x3a, 0x3f, 0xc0, 0x76, 0x59, 0xec, 0xea, 0x3a, 0xa5, 0x57, 0xcb, 0x46, 0x69, 0x74, 0x6f,
	0x94, 0x15, 0x29, 0xe3, 0xfc, 0x65, 0x64, 0x4a, 0xb8, 0x72, 0xf7, 0x07, 0x38, 0xb9, 0x85, 0xe2,
	0x65, 0x8f, 0x5d, 0xc4, 0x2c, 0xe3, 0x35, 0xfc, 0x5d, 0x52, 0x78, 0x5f, 0xa3, 0xf0, 0xa2, 0x1b,
	0x0f, 0x1a, 0xbb, 0xf1, 0x50, 0xef, 0xc6, 0xce, 0x77, 0xd9, 0x47, 0x88, 0xca, 0x23, 0x92, 0xff,
	0x86, 0xf6, 0xaf, 0x86, 0x76, 0x98, 0xcc, 0xd5, 0xf7, 0x87, 0xa4, 0x99, 0xed, 0xf3, 0x07, 0x59,
	0x8d, 0x0f, 0xea, 0x55, 0x1e, 0xf4, 0x04, 0xb6, 0x1a, 0x7c, 0x48, 0xf4, 0x0f, 0x1b, 0xc6, 0xe5,
	0x0f, 0x1b, 0x55, 0xeb, 0xf2, 0x49, 0xf7, 0xb4, 0x18, 0x2b, 0x4d, 0xe2, 0x32, 0xaf, 0x84, 0xdd,
	0xa8, 0xc3, 0x2e, 0x03, 0x64, 0x96, 0x01, 0x72, 0x7e, 0xd4, 0x10, 0x29, 0xf6, 0x27, 0x8d, 0x5f,
	0x5e, 0x0e, 0xea, 0x5f, 0x5e, 0x76, 0x9b, 0x45, 0x91, 0xcb, 0xbc, 0xd2, 0xbf, 0x63, 0xd8, 0x69,
	0xd6, 0x4c, 0xf2, 0xbd, 0x4a, 0x35, 0xb5, 0xbe, 0xb7, 0xf4, 0xc7, 0xcd, 0x4d, 0x9d, 0xaf, 0x61,
	0xaf, 0x5a, 0x7f, 0x39, 0x75, 0xe2, 0x7f, 0x77, 0x1b, 0x86, 0xd2, 0x55, 0x96, 0xe4, 0xff, 0x09,
	0xf3, 0xe1, 0xd9, 0x00, 0xbf, 0x6c, 0x1d, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x28, 0x2c,
	0x8b, 0xec, 0x12, 0x00, 0x00,
}
