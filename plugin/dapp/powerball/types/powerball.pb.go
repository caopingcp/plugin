// Code generated by protoc-gen-go. DO NOT EDIT.
// source: powerball.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	powerball.proto

It has these top-level messages:
	PurchaseRecord
	PurchaseRecords
	Powerball
	MissingRecord
	PowerballAction
	PowerballCreate
	PowerballBuy
	PowerballDraw
	PowerballClose
	ReceiptPowerball
	ReqPowerballInfo
	ReqPowerballBuyInfo
	ReqPowerballBuyHistory
	ReqPowerballLuckyInfo
	ReqPowerballLuckyHistory
	ReplyPowerballNormalInfo
	ReplyPowerballCurrentInfo
	ReplyPowerballHistoryLuckyNumber
	ReplyPowerballShowInfo
	PowerballNumberRecord
	PowerballBuyRecord
	PowerballBuyRecords
	PowerballDrawRecord
	PowerballDrawRecords
	PowerballUpdateRec
	PowerballUpdateRecs
	PowerballUpdateBuyInfo
	ReplyPowerballPurchaseAddr
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PurchaseRecord struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Number int64 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	Index  int64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Way    int64 `protobuf:"varint,4,opt,name=way" json:"way,omitempty"`
}

func (m *PurchaseRecord) Reset()                    { *m = PurchaseRecord{} }
func (m *PurchaseRecord) String() string            { return proto.CompactTextString(m) }
func (*PurchaseRecord) ProtoMessage()               {}
func (*PurchaseRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PurchaseRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PurchaseRecord) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *PurchaseRecord) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PurchaseRecord) GetWay() int64 {
	if m != nil {
		return m.Way
	}
	return 0
}

type PurchaseRecords struct {
	Record         []*PurchaseRecord `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
	FundWin        int64             `protobuf:"varint,2,opt,name=fundWin" json:"fundWin,omitempty"`
	AmountOneRound int64             `protobuf:"varint,3,opt,name=amountOneRound" json:"amountOneRound,omitempty"`
}

func (m *PurchaseRecords) Reset()                    { *m = PurchaseRecords{} }
func (m *PurchaseRecords) String() string            { return proto.CompactTextString(m) }
func (*PurchaseRecords) ProtoMessage()               {}
func (*PurchaseRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PurchaseRecords) GetRecord() []*PurchaseRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *PurchaseRecords) GetFundWin() int64 {
	if m != nil {
		return m.FundWin
	}
	return 0
}

func (m *PurchaseRecords) GetAmountOneRound() int64 {
	if m != nil {
		return m.AmountOneRound
	}
	return 0
}

type Powerball struct {
	PowerballId                string                      `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
	Status                     int32                       `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	CreateHeight               int64                       `protobuf:"varint,3,opt,name=createHeight" json:"createHeight,omitempty"`
	Fund                       int64                       `protobuf:"varint,4,opt,name=fund" json:"fund,omitempty"`
	PurBlockNum                int64                       `protobuf:"varint,5,opt,name=purBlockNum" json:"purBlockNum,omitempty"`
	DrawBlockNum               int64                       `protobuf:"varint,6,opt,name=drawBlockNum" json:"drawBlockNum,omitempty"`
	LastTransToPurState        int64                       `protobuf:"varint,7,opt,name=lastTransToPurState" json:"lastTransToPurState,omitempty"`
	LastTransToDrawState       int64                       `protobuf:"varint,8,opt,name=lastTransToDrawState" json:"lastTransToDrawState,omitempty"`
	Records                    map[string]*PurchaseRecords `protobuf:"bytes,9,rep,name=records" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TotalPurchasedTxNum        int64                       `protobuf:"varint,10,opt,name=totalPurchasedTxNum" json:"totalPurchasedTxNum,omitempty"`
	CreateAddr                 string                      `protobuf:"bytes,11,opt,name=createAddr" json:"createAddr,omitempty"`
	Round                      int64                       `protobuf:"varint,12,opt,name=round" json:"round,omitempty"`
	LuckyNumber                int64                       `protobuf:"varint,13,opt,name=luckyNumber" json:"luckyNumber,omitempty"`
	CreateOnMain               int64                       `protobuf:"varint,14,opt,name=createOnMain" json:"createOnMain,omitempty"`
	LastTransToPurStateOnMain  int64                       `protobuf:"varint,15,opt,name=lastTransToPurStateOnMain" json:"lastTransToPurStateOnMain,omitempty"`
	LastTransToDrawStateOnMain int64                       `protobuf:"varint,16,opt,name=lastTransToDrawStateOnMain" json:"lastTransToDrawStateOnMain,omitempty"`
	MissingRecords             []*MissingRecord            `protobuf:"bytes,17,rep,name=missingRecords" json:"missingRecords,omitempty"`
}

func (m *Powerball) Reset()                    { *m = Powerball{} }
func (m *Powerball) String() string            { return proto.CompactTextString(m) }
func (*Powerball) ProtoMessage()               {}
func (*Powerball) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Powerball) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

func (m *Powerball) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Powerball) GetCreateHeight() int64 {
	if m != nil {
		return m.CreateHeight
	}
	return 0
}

func (m *Powerball) GetFund() int64 {
	if m != nil {
		return m.Fund
	}
	return 0
}

func (m *Powerball) GetPurBlockNum() int64 {
	if m != nil {
		return m.PurBlockNum
	}
	return 0
}

func (m *Powerball) GetDrawBlockNum() int64 {
	if m != nil {
		return m.DrawBlockNum
	}
	return 0
}

func (m *Powerball) GetLastTransToPurState() int64 {
	if m != nil {
		return m.LastTransToPurState
	}
	return 0
}

func (m *Powerball) GetLastTransToDrawState() int64 {
	if m != nil {
		return m.LastTransToDrawState
	}
	return 0
}

func (m *Powerball) GetRecords() map[string]*PurchaseRecords {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *Powerball) GetTotalPurchasedTxNum() int64 {
	if m != nil {
		return m.TotalPurchasedTxNum
	}
	return 0
}

func (m *Powerball) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

func (m *Powerball) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Powerball) GetLuckyNumber() int64 {
	if m != nil {
		return m.LuckyNumber
	}
	return 0
}

func (m *Powerball) GetCreateOnMain() int64 {
	if m != nil {
		return m.CreateOnMain
	}
	return 0
}

func (m *Powerball) GetLastTransToPurStateOnMain() int64 {
	if m != nil {
		return m.LastTransToPurStateOnMain
	}
	return 0
}

func (m *Powerball) GetLastTransToDrawStateOnMain() int64 {
	if m != nil {
		return m.LastTransToDrawStateOnMain
	}
	return 0
}

func (m *Powerball) GetMissingRecords() []*MissingRecord {
	if m != nil {
		return m.MissingRecords
	}
	return nil
}

type MissingRecord struct {
	Times []int32 `protobuf:"varint,1,rep,packed,name=times" json:"times,omitempty"`
}

func (m *MissingRecord) Reset()                    { *m = MissingRecord{} }
func (m *MissingRecord) String() string            { return proto.CompactTextString(m) }
func (*MissingRecord) ProtoMessage()               {}
func (*MissingRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MissingRecord) GetTimes() []int32 {
	if m != nil {
		return m.Times
	}
	return nil
}

type PowerballAction struct {
	// Types that are valid to be assigned to Value:
	//	*PowerballAction_Create
	//	*PowerballAction_Buy
	//	*PowerballAction_Draw
	//	*PowerballAction_Close
	Value isPowerballAction_Value `protobuf_oneof:"value"`
	Ty    int32                   `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *PowerballAction) Reset()                    { *m = PowerballAction{} }
func (m *PowerballAction) String() string            { return proto.CompactTextString(m) }
func (*PowerballAction) ProtoMessage()               {}
func (*PowerballAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isPowerballAction_Value interface {
	isPowerballAction_Value()
}

type PowerballAction_Create struct {
	Create *PowerballCreate `protobuf:"bytes,1,opt,name=create,oneof"`
}
type PowerballAction_Buy struct {
	Buy *PowerballBuy `protobuf:"bytes,2,opt,name=buy,oneof"`
}
type PowerballAction_Draw struct {
	Draw *PowerballDraw `protobuf:"bytes,3,opt,name=draw,oneof"`
}
type PowerballAction_Close struct {
	Close *PowerballClose `protobuf:"bytes,4,opt,name=close,oneof"`
}

func (*PowerballAction_Create) isPowerballAction_Value() {}
func (*PowerballAction_Buy) isPowerballAction_Value()    {}
func (*PowerballAction_Draw) isPowerballAction_Value()   {}
func (*PowerballAction_Close) isPowerballAction_Value()  {}

func (m *PowerballAction) GetValue() isPowerballAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PowerballAction) GetCreate() *PowerballCreate {
	if x, ok := m.GetValue().(*PowerballAction_Create); ok {
		return x.Create
	}
	return nil
}

func (m *PowerballAction) GetBuy() *PowerballBuy {
	if x, ok := m.GetValue().(*PowerballAction_Buy); ok {
		return x.Buy
	}
	return nil
}

func (m *PowerballAction) GetDraw() *PowerballDraw {
	if x, ok := m.GetValue().(*PowerballAction_Draw); ok {
		return x.Draw
	}
	return nil
}

func (m *PowerballAction) GetClose() *PowerballClose {
	if x, ok := m.GetValue().(*PowerballAction_Close); ok {
		return x.Close
	}
	return nil
}

func (m *PowerballAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PowerballAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PowerballAction_OneofMarshaler, _PowerballAction_OneofUnmarshaler, _PowerballAction_OneofSizer, []interface{}{
		(*PowerballAction_Create)(nil),
		(*PowerballAction_Buy)(nil),
		(*PowerballAction_Draw)(nil),
		(*PowerballAction_Close)(nil),
	}
}

func _PowerballAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PowerballAction)
	// value
	switch x := m.Value.(type) {
	case *PowerballAction_Create:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Create); err != nil {
			return err
		}
	case *PowerballAction_Buy:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Buy); err != nil {
			return err
		}
	case *PowerballAction_Draw:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Draw); err != nil {
			return err
		}
	case *PowerballAction_Close:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Close); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PowerballAction.Value has unexpected type %T", x)
	}
	return nil
}

func _PowerballAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PowerballAction)
	switch tag {
	case 1: // value.create
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballCreate)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Create{msg}
		return true, err
	case 2: // value.buy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballBuy)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Buy{msg}
		return true, err
	case 3: // value.draw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballDraw)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Draw{msg}
		return true, err
	case 4: // value.close
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PowerballClose)
		err := b.DecodeMessage(msg)
		m.Value = &PowerballAction_Close{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PowerballAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PowerballAction)
	// value
	switch x := m.Value.(type) {
	case *PowerballAction_Create:
		s := proto.Size(x.Create)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PowerballAction_Buy:
		s := proto.Size(x.Buy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PowerballAction_Draw:
		s := proto.Size(x.Draw)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PowerballAction_Close:
		s := proto.Size(x.Close)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PowerballCreate struct {
	PurBlockNum  int64 `protobuf:"varint,1,opt,name=purBlockNum" json:"purBlockNum,omitempty"`
	DrawBlockNum int64 `protobuf:"varint,2,opt,name=drawBlockNum" json:"drawBlockNum,omitempty"`
}

func (m *PowerballCreate) Reset()                    { *m = PowerballCreate{} }
func (m *PowerballCreate) String() string            { return proto.CompactTextString(m) }
func (*PowerballCreate) ProtoMessage()               {}
func (*PowerballCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PowerballCreate) GetPurBlockNum() int64 {
	if m != nil {
		return m.PurBlockNum
	}
	return 0
}

func (m *PowerballCreate) GetDrawBlockNum() int64 {
	if m != nil {
		return m.DrawBlockNum
	}
	return 0
}

type PowerballBuy struct {
	PowerballId string `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
	Amount      int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Number      int64  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	Way         int64  `protobuf:"varint,4,opt,name=way" json:"way,omitempty"`
}

func (m *PowerballBuy) Reset()                    { *m = PowerballBuy{} }
func (m *PowerballBuy) String() string            { return proto.CompactTextString(m) }
func (*PowerballBuy) ProtoMessage()               {}
func (*PowerballBuy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PowerballBuy) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

func (m *PowerballBuy) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PowerballBuy) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *PowerballBuy) GetWay() int64 {
	if m != nil {
		return m.Way
	}
	return 0
}

type PowerballDraw struct {
	PowerballId string `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
}

func (m *PowerballDraw) Reset()                    { *m = PowerballDraw{} }
func (m *PowerballDraw) String() string            { return proto.CompactTextString(m) }
func (*PowerballDraw) ProtoMessage()               {}
func (*PowerballDraw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PowerballDraw) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

type PowerballClose struct {
	PowerballId string `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
}

func (m *PowerballClose) Reset()                    { *m = PowerballClose{} }
func (m *PowerballClose) String() string            { return proto.CompactTextString(m) }
func (*PowerballClose) ProtoMessage()               {}
func (*PowerballClose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PowerballClose) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

type ReceiptPowerball struct {
	PowerballId string                  `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
	Status      int32                   `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	PrevStatus  int32                   `protobuf:"varint,3,opt,name=prevStatus" json:"prevStatus,omitempty"`
	Addr        string                  `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Round       int64                   `protobuf:"varint,5,opt,name=round" json:"round,omitempty"`
	Number      int64                   `protobuf:"varint,6,opt,name=number" json:"number,omitempty"`
	Amount      int64                   `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
	LuckyNumber int64                   `protobuf:"varint,8,opt,name=luckyNumber" json:"luckyNumber,omitempty"`
	Time        int64                   `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	TxHash      string                  `protobuf:"bytes,10,opt,name=txHash" json:"txHash,omitempty"`
	UpdateInfo  *PowerballUpdateBuyInfo `protobuf:"bytes,11,opt,name=updateInfo" json:"updateInfo,omitempty"`
	Way         int64                   `protobuf:"varint,12,opt,name=way" json:"way,omitempty"`
	Index       int64                   `protobuf:"varint,13,opt,name=index" json:"index,omitempty"`
}

func (m *ReceiptPowerball) Reset()                    { *m = ReceiptPowerball{} }
func (m *ReceiptPowerball) String() string            { return proto.CompactTextString(m) }
func (*ReceiptPowerball) ProtoMessage()               {}
func (*ReceiptPowerball) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReceiptPowerball) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

func (m *ReceiptPowerball) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReceiptPowerball) GetPrevStatus() int32 {
	if m != nil {
		return m.PrevStatus
	}
	return 0
}

func (m *ReceiptPowerball) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptPowerball) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReceiptPowerball) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ReceiptPowerball) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReceiptPowerball) GetLuckyNumber() int64 {
	if m != nil {
		return m.LuckyNumber
	}
	return 0
}

func (m *ReceiptPowerball) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ReceiptPowerball) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReceiptPowerball) GetUpdateInfo() *PowerballUpdateBuyInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

func (m *ReceiptPowerball) GetWay() int64 {
	if m != nil {
		return m.Way
	}
	return 0
}

func (m *ReceiptPowerball) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReqPowerballInfo struct {
	PowerballId string `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
}

func (m *ReqPowerballInfo) Reset()                    { *m = ReqPowerballInfo{} }
func (m *ReqPowerballInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballInfo) ProtoMessage()               {}
func (*ReqPowerballInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReqPowerballInfo) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

type ReqPowerballBuyInfo struct {
	PowerballId string `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
	Addr        string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Round       int64  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
}

func (m *ReqPowerballBuyInfo) Reset()                    { *m = ReqPowerballBuyInfo{} }
func (m *ReqPowerballBuyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballBuyInfo) ProtoMessage()               {}
func (*ReqPowerballBuyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReqPowerballBuyInfo) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

func (m *ReqPowerballBuyInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqPowerballBuyInfo) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type ReqPowerballBuyHistory struct {
	PowerballId string `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
	Addr        string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Round       int64  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Count       int32  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Direction   int32  `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
	Index       int64  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
}

func (m *ReqPowerballBuyHistory) Reset()                    { *m = ReqPowerballBuyHistory{} }
func (m *ReqPowerballBuyHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballBuyHistory) ProtoMessage()               {}
func (*ReqPowerballBuyHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReqPowerballBuyHistory) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

func (m *ReqPowerballBuyHistory) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqPowerballBuyHistory) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReqPowerballBuyHistory) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqPowerballBuyHistory) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqPowerballBuyHistory) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReqPowerballLuckyInfo struct {
	PowerballId string  `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
	Round       []int64 `protobuf:"varint,2,rep,packed,name=round" json:"round,omitempty"`
}

func (m *ReqPowerballLuckyInfo) Reset()                    { *m = ReqPowerballLuckyInfo{} }
func (m *ReqPowerballLuckyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballLuckyInfo) ProtoMessage()               {}
func (*ReqPowerballLuckyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReqPowerballLuckyInfo) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

func (m *ReqPowerballLuckyInfo) GetRound() []int64 {
	if m != nil {
		return m.Round
	}
	return nil
}

type ReqPowerballLuckyHistory struct {
	PowerballId string `protobuf:"bytes,1,opt,name=powerballId" json:"powerballId,omitempty"`
	Round       int64  `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Count       int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction   int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
}

func (m *ReqPowerballLuckyHistory) Reset()                    { *m = ReqPowerballLuckyHistory{} }
func (m *ReqPowerballLuckyHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqPowerballLuckyHistory) ProtoMessage()               {}
func (*ReqPowerballLuckyHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReqPowerballLuckyHistory) GetPowerballId() string {
	if m != nil {
		return m.PowerballId
	}
	return ""
}

func (m *ReqPowerballLuckyHistory) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReqPowerballLuckyHistory) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqPowerballLuckyHistory) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type ReplyPowerballNormalInfo struct {
	CreateHeight int64  `protobuf:"varint,1,opt,name=createHeight" json:"createHeight,omitempty"`
	PurBlockNum  int64  `protobuf:"varint,2,opt,name=purBlockNum" json:"purBlockNum,omitempty"`
	DrawBlockNum int64  `protobuf:"varint,3,opt,name=drawBlockNum" json:"drawBlockNum,omitempty"`
	CreateAddr   string `protobuf:"bytes,4,opt,name=createAddr" json:"createAddr,omitempty"`
}

func (m *ReplyPowerballNormalInfo) Reset()                    { *m = ReplyPowerballNormalInfo{} }
func (m *ReplyPowerballNormalInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballNormalInfo) ProtoMessage()               {}
func (*ReplyPowerballNormalInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReplyPowerballNormalInfo) GetCreateHeight() int64 {
	if m != nil {
		return m.CreateHeight
	}
	return 0
}

func (m *ReplyPowerballNormalInfo) GetPurBlockNum() int64 {
	if m != nil {
		return m.PurBlockNum
	}
	return 0
}

func (m *ReplyPowerballNormalInfo) GetDrawBlockNum() int64 {
	if m != nil {
		return m.DrawBlockNum
	}
	return 0
}

func (m *ReplyPowerballNormalInfo) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

type ReplyPowerballCurrentInfo struct {
	Status                     int32            `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Fund                       int64            `protobuf:"varint,2,opt,name=fund" json:"fund,omitempty"`
	LastTransToPurState        int64            `protobuf:"varint,3,opt,name=lastTransToPurState" json:"lastTransToPurState,omitempty"`
	LastTransToDrawState       int64            `protobuf:"varint,4,opt,name=lastTransToDrawState" json:"lastTransToDrawState,omitempty"`
	TotalPurchasedTxNum        int64            `protobuf:"varint,5,opt,name=totalPurchasedTxNum" json:"totalPurchasedTxNum,omitempty"`
	Round                      int64            `protobuf:"varint,6,opt,name=round" json:"round,omitempty"`
	LuckyNumber                int64            `protobuf:"varint,7,opt,name=luckyNumber" json:"luckyNumber,omitempty"`
	LastTransToPurStateOnMain  int64            `protobuf:"varint,8,opt,name=lastTransToPurStateOnMain" json:"lastTransToPurStateOnMain,omitempty"`
	LastTransToDrawStateOnMain int64            `protobuf:"varint,9,opt,name=lastTransToDrawStateOnMain" json:"lastTransToDrawStateOnMain,omitempty"`
	PurBlockNum                int64            `protobuf:"varint,10,opt,name=purBlockNum" json:"purBlockNum,omitempty"`
	DrawBlockNum               int64            `protobuf:"varint,11,opt,name=drawBlockNum" json:"drawBlockNum,omitempty"`
	MissingRecords             []*MissingRecord `protobuf:"bytes,12,rep,name=missingRecords" json:"missingRecords,omitempty"`
}

func (m *ReplyPowerballCurrentInfo) Reset()                    { *m = ReplyPowerballCurrentInfo{} }
func (m *ReplyPowerballCurrentInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballCurrentInfo) ProtoMessage()               {}
func (*ReplyPowerballCurrentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReplyPowerballCurrentInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetFund() int64 {
	if m != nil {
		return m.Fund
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToPurState() int64 {
	if m != nil {
		return m.LastTransToPurState
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToDrawState() int64 {
	if m != nil {
		return m.LastTransToDrawState
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetTotalPurchasedTxNum() int64 {
	if m != nil {
		return m.TotalPurchasedTxNum
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLuckyNumber() int64 {
	if m != nil {
		return m.LuckyNumber
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToPurStateOnMain() int64 {
	if m != nil {
		return m.LastTransToPurStateOnMain
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetLastTransToDrawStateOnMain() int64 {
	if m != nil {
		return m.LastTransToDrawStateOnMain
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetPurBlockNum() int64 {
	if m != nil {
		return m.PurBlockNum
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetDrawBlockNum() int64 {
	if m != nil {
		return m.DrawBlockNum
	}
	return 0
}

func (m *ReplyPowerballCurrentInfo) GetMissingRecords() []*MissingRecord {
	if m != nil {
		return m.MissingRecords
	}
	return nil
}

type ReplyPowerballHistoryLuckyNumber struct {
	LuckyNumber []int64 `protobuf:"varint,1,rep,packed,name=luckyNumber" json:"luckyNumber,omitempty"`
}

func (m *ReplyPowerballHistoryLuckyNumber) Reset()         { *m = ReplyPowerballHistoryLuckyNumber{} }
func (m *ReplyPowerballHistoryLuckyNumber) String() string { return proto.CompactTextString(m) }
func (*ReplyPowerballHistoryLuckyNumber) ProtoMessage()    {}
func (*ReplyPowerballHistoryLuckyNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *ReplyPowerballHistoryLuckyNumber) GetLuckyNumber() []int64 {
	if m != nil {
		return m.LuckyNumber
	}
	return nil
}

type ReplyPowerballShowInfo struct {
	Records []*PowerballBuyRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *ReplyPowerballShowInfo) Reset()                    { *m = ReplyPowerballShowInfo{} }
func (m *ReplyPowerballShowInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballShowInfo) ProtoMessage()               {}
func (*ReplyPowerballShowInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReplyPowerballShowInfo) GetRecords() []*PowerballBuyRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballNumberRecord struct {
	Number int64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Amount int64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *PowerballNumberRecord) Reset()                    { *m = PowerballNumberRecord{} }
func (m *PowerballNumberRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerballNumberRecord) ProtoMessage()               {}
func (*PowerballNumberRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PowerballNumberRecord) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *PowerballNumberRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// used for execlocal
type PowerballBuyRecord struct {
	Number int64  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Round  int64  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Type   int64  `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Way    int64  `protobuf:"varint,5,opt,name=way" json:"way,omitempty"`
	Index  int64  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Time   int64  `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
	TxHash string `protobuf:"bytes,8,opt,name=txHash" json:"txHash,omitempty"`
}

func (m *PowerballBuyRecord) Reset()                    { *m = PowerballBuyRecord{} }
func (m *PowerballBuyRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerballBuyRecord) ProtoMessage()               {}
func (*PowerballBuyRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PowerballBuyRecord) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *PowerballBuyRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PowerballBuyRecord) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PowerballBuyRecord) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PowerballBuyRecord) GetWay() int64 {
	if m != nil {
		return m.Way
	}
	return 0
}

func (m *PowerballBuyRecord) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PowerballBuyRecord) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PowerballBuyRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type PowerballBuyRecords struct {
	Records []*PowerballBuyRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *PowerballBuyRecords) Reset()                    { *m = PowerballBuyRecords{} }
func (m *PowerballBuyRecords) String() string            { return proto.CompactTextString(m) }
func (*PowerballBuyRecords) ProtoMessage()               {}
func (*PowerballBuyRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PowerballBuyRecords) GetRecords() []*PowerballBuyRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballDrawRecord struct {
	Number int64  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Round  int64  `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Time   int64  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	TxHash string `protobuf:"bytes,4,opt,name=txHash" json:"txHash,omitempty"`
}

func (m *PowerballDrawRecord) Reset()                    { *m = PowerballDrawRecord{} }
func (m *PowerballDrawRecord) String() string            { return proto.CompactTextString(m) }
func (*PowerballDrawRecord) ProtoMessage()               {}
func (*PowerballDrawRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PowerballDrawRecord) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *PowerballDrawRecord) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PowerballDrawRecord) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PowerballDrawRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type PowerballDrawRecords struct {
	Records []*PowerballDrawRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *PowerballDrawRecords) Reset()                    { *m = PowerballDrawRecords{} }
func (m *PowerballDrawRecords) String() string            { return proto.CompactTextString(m) }
func (*PowerballDrawRecords) ProtoMessage()               {}
func (*PowerballDrawRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PowerballDrawRecords) GetRecords() []*PowerballDrawRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballUpdateRec struct {
	Index int64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Type  int64 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *PowerballUpdateRec) Reset()                    { *m = PowerballUpdateRec{} }
func (m *PowerballUpdateRec) String() string            { return proto.CompactTextString(m) }
func (*PowerballUpdateRec) ProtoMessage()               {}
func (*PowerballUpdateRec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *PowerballUpdateRec) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PowerballUpdateRec) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

type PowerballUpdateRecs struct {
	Records []*PowerballUpdateRec `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *PowerballUpdateRecs) Reset()                    { *m = PowerballUpdateRecs{} }
func (m *PowerballUpdateRecs) String() string            { return proto.CompactTextString(m) }
func (*PowerballUpdateRecs) ProtoMessage()               {}
func (*PowerballUpdateRecs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *PowerballUpdateRecs) GetRecords() []*PowerballUpdateRec {
	if m != nil {
		return m.Records
	}
	return nil
}

type PowerballUpdateBuyInfo struct {
	BuyInfo map[string]*PowerballUpdateRecs `protobuf:"bytes,1,rep,name=buyInfo" json:"buyInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PowerballUpdateBuyInfo) Reset()                    { *m = PowerballUpdateBuyInfo{} }
func (m *PowerballUpdateBuyInfo) String() string            { return proto.CompactTextString(m) }
func (*PowerballUpdateBuyInfo) ProtoMessage()               {}
func (*PowerballUpdateBuyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PowerballUpdateBuyInfo) GetBuyInfo() map[string]*PowerballUpdateRecs {
	if m != nil {
		return m.BuyInfo
	}
	return nil
}

type ReplyPowerballPurchaseAddr struct {
	Address []string `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (m *ReplyPowerballPurchaseAddr) Reset()                    { *m = ReplyPowerballPurchaseAddr{} }
func (m *ReplyPowerballPurchaseAddr) String() string            { return proto.CompactTextString(m) }
func (*ReplyPowerballPurchaseAddr) ProtoMessage()               {}
func (*ReplyPowerballPurchaseAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReplyPowerballPurchaseAddr) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*PurchaseRecord)(nil), "types.PurchaseRecord")
	proto.RegisterType((*PurchaseRecords)(nil), "types.PurchaseRecords")
	proto.RegisterType((*Powerball)(nil), "types.Powerball")
	proto.RegisterType((*MissingRecord)(nil), "types.MissingRecord")
	proto.RegisterType((*PowerballAction)(nil), "types.PowerballAction")
	proto.RegisterType((*PowerballCreate)(nil), "types.PowerballCreate")
	proto.RegisterType((*PowerballBuy)(nil), "types.PowerballBuy")
	proto.RegisterType((*PowerballDraw)(nil), "types.PowerballDraw")
	proto.RegisterType((*PowerballClose)(nil), "types.PowerballClose")
	proto.RegisterType((*ReceiptPowerball)(nil), "types.ReceiptPowerball")
	proto.RegisterType((*ReqPowerballInfo)(nil), "types.ReqPowerballInfo")
	proto.RegisterType((*ReqPowerballBuyInfo)(nil), "types.ReqPowerballBuyInfo")
	proto.RegisterType((*ReqPowerballBuyHistory)(nil), "types.ReqPowerballBuyHistory")
	proto.RegisterType((*ReqPowerballLuckyInfo)(nil), "types.ReqPowerballLuckyInfo")
	proto.RegisterType((*ReqPowerballLuckyHistory)(nil), "types.ReqPowerballLuckyHistory")
	proto.RegisterType((*ReplyPowerballNormalInfo)(nil), "types.ReplyPowerballNormalInfo")
	proto.RegisterType((*ReplyPowerballCurrentInfo)(nil), "types.ReplyPowerballCurrentInfo")
	proto.RegisterType((*ReplyPowerballHistoryLuckyNumber)(nil), "types.ReplyPowerballHistoryLuckyNumber")
	proto.RegisterType((*ReplyPowerballShowInfo)(nil), "types.ReplyPowerballShowInfo")
	proto.RegisterType((*PowerballNumberRecord)(nil), "types.PowerballNumberRecord")
	proto.RegisterType((*PowerballBuyRecord)(nil), "types.PowerballBuyRecord")
	proto.RegisterType((*PowerballBuyRecords)(nil), "types.PowerballBuyRecords")
	proto.RegisterType((*PowerballDrawRecord)(nil), "types.PowerballDrawRecord")
	proto.RegisterType((*PowerballDrawRecords)(nil), "types.PowerballDrawRecords")
	proto.RegisterType((*PowerballUpdateRec)(nil), "types.PowerballUpdateRec")
	proto.RegisterType((*PowerballUpdateRecs)(nil), "types.PowerballUpdateRecs")
	proto.RegisterType((*PowerballUpdateBuyInfo)(nil), "types.PowerballUpdateBuyInfo")
	proto.RegisterType((*ReplyPowerballPurchaseAddr)(nil), "types.ReplyPowerballPurchaseAddr")
}

func init() { proto.RegisterFile("powerball.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x49, 0x51, 0xb2, 0xc6, 0xb2, 0xe2, 0xae, 0x7f, 0x40, 0x0b, 0x6d, 0x60, 0x10, 0x68,
	0x1b, 0x04, 0x8d, 0xe1, 0x3a, 0x41, 0x5b, 0x14, 0x69, 0x80, 0x38, 0x2e, 0xaa, 0x14, 0xfe, 0x03,
	0xed, 0x36, 0x67, 0x5a, 0xda, 0xc4, 0x84, 0x25, 0x52, 0x25, 0x97, 0xb1, 0x79, 0xed, 0xa1, 0xef,
	0xd0, 0x5b, 0x0f, 0x3d, 0xf7, 0xd8, 0x07, 0xe8, 0x93, 0xf4, 0x3d, 0x7a, 0x29, 0x76, 0x76, 0x49,
	0x2e, 0xa9, 0x95, 0xa5, 0xb4, 0x39, 0x69, 0x77, 0x76, 0x76, 0x77, 0xf6, 0x9b, 0x99, 0x6f, 0x86,
	0x82, 0x7b, 0x93, 0xe8, 0x86, 0xc6, 0x97, 0xfe, 0x68, 0xb4, 0x3b, 0x89, 0x23, 0x16, 0x11, 0x9b,
	0x65, 0x13, 0x9a, 0xb8, 0x57, 0xd0, 0x3d, 0x4b, 0xe3, 0xc1, 0x95, 0x9f, 0x50, 0x8f, 0x0e, 0xa2,
	0x78, 0x48, 0xb6, 0xa0, 0xe9, 0x8f, 0xa3, 0x34, 0x64, 0x8e, 0xb1, 0x63, 0x3c, 0xb0, 0x3c, 0x39,
	0xe3, 0xf2, 0x30, 0x1d, 0x5f, 0xd2, 0xd8, 0x31, 0x85, 0x5c, 0xcc, 0xc8, 0x06, 0xd8, 0x41, 0x38,
	0xa4, 0xb7, 0x8e, 0x85, 0x62, 0x31, 0x21, 0x6b, 0x60, 0xdd, 0xf8, 0x99, 0xd3, 0x40, 0x19, 0x1f,
	0xba, 0x3f, 0x1b, 0x70, 0xaf, 0x7a, 0x55, 0x42, 0x1e, 0x41, 0x33, 0xc6, 0xa1, 0x63, 0xec, 0x58,
	0x0f, 0x56, 0xf6, 0x37, 0x77, 0xd1, 0xaa, 0xdd, 0xaa, 0x9e, 0x27, 0x95, 0x88, 0x03, 0xad, 0xd7,
	0x69, 0x38, 0x7c, 0x15, 0x84, 0xd2, 0x86, 0x7c, 0x4a, 0x3e, 0x81, 0xae, 0x30, 0xf3, 0x34, 0xa4,
	0x5e, 0x94, 0x86, 0x43, 0x69, 0x4d, 0x4d, 0xea, 0xfe, 0xd6, 0x84, 0xf6, 0x59, 0x8e, 0x04, 0xd9,
	0x81, 0x95, 0x02, 0x96, 0x97, 0x43, 0x7c, 0x6f, 0xdb, 0x53, 0x45, 0xfc, 0xd1, 0x09, 0xf3, 0x59,
	0x9a, 0xe0, 0x85, 0xb6, 0x27, 0x67, 0xc4, 0x85, 0xce, 0x20, 0xa6, 0x3e, 0xa3, 0x7d, 0x1a, 0xbc,
	0xb9, 0x62, 0xf2, 0xb6, 0x8a, 0x8c, 0x10, 0x68, 0x70, 0xf3, 0x24, 0x06, 0x38, 0xc6, 0x1b, 0xd3,
	0xf8, 0x60, 0x14, 0x0d, 0xae, 0x4f, 0xd2, 0xb1, 0x63, 0xe3, 0x92, 0x2a, 0xe2, 0x27, 0x0f, 0x63,
	0xff, 0xa6, 0x50, 0x69, 0x8a, 0x93, 0x55, 0x19, 0xd9, 0x83, 0xf5, 0x91, 0x9f, 0xb0, 0x8b, 0xd8,
	0x0f, 0x93, 0x8b, 0xe8, 0x2c, 0x8d, 0xcf, 0x99, 0xcf, 0xa8, 0xd3, 0x42, 0x55, 0xdd, 0x12, 0xd9,
	0x87, 0x0d, 0x45, 0x7c, 0x18, 0xfb, 0x37, 0x62, 0xcb, 0x32, 0x6e, 0xd1, 0xae, 0x91, 0x2f, 0xa1,
	0x25, 0x70, 0x4f, 0x9c, 0x36, 0x7a, 0xe7, 0xa3, 0xdc, 0x3b, 0x45, 0x28, 0x49, 0x3f, 0x7e, 0x1b,
	0xb2, 0x38, 0xf3, 0x72, 0x6d, 0x6e, 0x1e, 0x8b, 0x98, 0x3f, 0xca, 0xbd, 0x38, 0xbc, 0xb8, 0xe5,
	0x2f, 0x01, 0x61, 0x9e, 0x66, 0x89, 0xdc, 0x07, 0x10, 0xd0, 0x3d, 0x1f, 0x0e, 0x63, 0x67, 0x05,
	0xfd, 0xa0, 0x48, 0x78, 0x8c, 0xc5, 0xe8, 0xd5, 0x8e, 0x88, 0x31, 0x9c, 0x70, 0x30, 0x47, 0xe9,
	0xe0, 0x3a, 0x3b, 0x11, 0x61, 0xb9, 0x2a, 0xc0, 0x54, 0x44, 0xa5, 0x9b, 0x4e, 0xc3, 0x63, 0x3f,
	0x08, 0x9d, 0xae, 0xea, 0x26, 0x21, 0x23, 0x4f, 0x61, 0x5b, 0x83, 0x98, 0xdc, 0x70, 0x0f, 0x37,
	0xcc, 0x56, 0x20, 0xcf, 0xa0, 0xa7, 0x03, 0x4f, 0x6e, 0x5f, 0xc3, 0xed, 0x77, 0x68, 0x90, 0xa7,
	0xd0, 0x1d, 0x07, 0x49, 0x12, 0x84, 0x6f, 0x24, 0x96, 0xce, 0x07, 0x88, 0xf5, 0x86, 0xc4, 0xfa,
	0x58, 0x5d, 0xf4, 0x6a, 0xba, 0x3d, 0x0f, 0x3a, 0xaa, 0x0b, 0x78, 0xd6, 0x5d, 0xd3, 0x4c, 0x06,
	0x32, 0x1f, 0x92, 0xcf, 0xc0, 0x7e, 0xeb, 0x8f, 0x52, 0x8a, 0xf1, 0xbb, 0xb2, 0xbf, 0xa5, 0x4d,
	0xb0, 0xc4, 0x13, 0x4a, 0x5f, 0x9b, 0x5f, 0x19, 0xee, 0xc7, 0xb0, 0x5a, 0xb9, 0x94, 0x83, 0xcf,
	0x82, 0x31, 0x4d, 0x30, 0x47, 0x6d, 0x4f, 0x4c, 0xdc, 0xbf, 0x79, 0x3a, 0xe7, 0x81, 0xf0, 0x7c,
	0xc0, 0x82, 0x28, 0x24, 0x7b, 0xd0, 0x14, 0xd0, 0xa2, 0x05, 0xca, 0x6d, 0xb9, 0xde, 0x0b, 0x91,
	0x1f, 0x4b, 0x9e, 0xd4, 0x23, 0x9f, 0x82, 0x75, 0x99, 0x66, 0xd2, 0xb8, 0xf5, 0xba, 0xfa, 0x41,
	0x9a, 0xf5, 0x97, 0x3c, 0xae, 0x41, 0x1e, 0x42, 0x83, 0xa7, 0x00, 0x26, 0x5a, 0x89, 0x4e, 0xa1,
	0xc9, 0x61, 0xed, 0x2f, 0x79, 0xa8, 0x43, 0x1e, 0x81, 0x3d, 0x18, 0x45, 0x09, 0xc5, 0xcc, 0x53,
	0x48, 0xa5, 0xb0, 0x82, 0x2f, 0xf6, 0x97, 0x3c, 0xa1, 0x45, 0xba, 0x60, 0xb2, 0x0c, 0xa3, 0xd3,
	0xf6, 0x4c, 0x96, 0x1d, 0xb4, 0x24, 0x64, 0xee, 0x2b, 0xe5, 0x85, 0xc2, 0xf2, 0x7a, 0xfe, 0x1a,
	0xf3, 0xf3, 0xd7, 0x9c, 0xce, 0x5f, 0x37, 0x86, 0x8e, 0xfa, 0xc6, 0xc5, 0x78, 0x48, 0x92, 0xb2,
	0x39, 0x83, 0x94, 0xad, 0x0a, 0x29, 0x4f, 0xd3, 0xef, 0xe7, 0xb0, 0x5a, 0x41, 0x6b, 0xfe, 0xa5,
	0xee, 0x3e, 0x74, 0xab, 0x98, 0x2d, 0xb0, 0xe7, 0x1f, 0x13, 0xd6, 0x3c, 0x3a, 0xa0, 0xc1, 0x84,
	0xbd, 0x0f, 0x9e, 0xbd, 0x0f, 0x30, 0x89, 0xe9, 0xdb, 0x73, 0xb1, 0x66, 0xe1, 0x9a, 0x22, 0xe1,
	0x1c, 0xeb, 0x73, 0xca, 0x68, 0xe0, 0x91, 0x38, 0x2e, 0xc9, 0xc2, 0x56, 0xc9, 0xa2, 0x44, 0xaa,
	0x59, 0x41, 0xaa, 0x44, 0xb6, 0x55, 0x41, 0xb6, 0x46, 0x2e, 0xcb, 0xd3, 0xe4, 0x42, 0xa0, 0xc1,
	0x53, 0xc1, 0x69, 0x0b, 0x7e, 0xe7, 0x63, 0x7e, 0x1a, 0xbb, 0xed, 0xfb, 0xc9, 0x15, 0xc6, 0x53,
	0xdb, 0x93, 0x33, 0xf2, 0x0d, 0x40, 0x3a, 0x19, 0xfa, 0x8c, 0xbe, 0x0c, 0x5f, 0x47, 0x48, 0x70,
	0x1a, 0x3a, 0xfd, 0x01, 0x35, 0x0e, 0xd2, 0x8c, 0x2b, 0x79, 0xca, 0x86, 0xdc, 0x9d, 0x9d, 0xc2,
	0x9d, 0x65, 0xd5, 0x5d, 0x55, 0xaa, 0xae, 0xfb, 0x84, 0x83, 0xff, 0x53, 0x71, 0x20, 0xee, 0x9d,
	0xef, 0x33, 0x1f, 0xd6, 0xd5, 0x5d, 0xd2, 0x80, 0x05, 0xbc, 0x96, 0xa3, 0x6f, 0xea, 0xd0, 0xb7,
	0x14, 0xf4, 0xdd, 0x3f, 0x0c, 0xd8, 0xaa, 0xdd, 0xd1, 0x0f, 0x12, 0x16, 0xc5, 0xd9, 0xfb, 0xbc,
	0x86, 0x4b, 0x07, 0xe8, 0xcb, 0x06, 0x46, 0x8a, 0x98, 0x90, 0x0f, 0xa1, 0x3d, 0x0c, 0x62, 0x8a,
	0x1c, 0x85, 0x41, 0x61, 0x7b, 0xa5, 0xa0, 0x44, 0xb2, 0xa9, 0x22, 0x79, 0x0a, 0x9b, 0xaa, 0xbd,
	0x47, 0xdc, 0xef, 0x0b, 0xa2, 0x52, 0x98, 0x66, 0xee, 0x58, 0x25, 0x02, 0xbf, 0x18, 0xe0, 0x4c,
	0x9d, 0xb8, 0x38, 0x06, 0xca, 0xa1, 0xba, 0xf7, 0x5a, 0x33, 0xdf, 0xdb, 0xa8, 0xbd, 0xd7, 0xfd,
	0x1d, 0x0d, 0x99, 0x8c, 0xb2, 0xc2, 0x94, 0x93, 0x28, 0x1e, 0xfb, 0x22, 0x58, 0xea, 0x7d, 0x8d,
	0xa1, 0xe9, 0x6b, 0x6a, 0x1c, 0x68, 0xce, 0xe7, 0x40, 0x4b, 0xd3, 0xc3, 0x54, 0x4b, 0x7e, 0xa3,
	0x5e, 0xf2, 0xdd, 0x5f, 0x1b, 0xb0, 0x5d, 0x35, 0xf3, 0x45, 0x1a, 0xc7, 0x34, 0x64, 0x68, 0x67,
	0xc9, 0x17, 0x46, 0x85, 0x2f, 0xf2, 0x9e, 0xcb, 0x54, 0x7a, 0xae, 0x19, 0xdd, 0x92, 0xf5, 0xee,
	0xdd, 0x52, 0xe3, 0x8e, 0x6e, 0x69, 0x46, 0xd3, 0x63, 0xcf, 0x6e, 0x7a, 0x0a, 0x97, 0x36, 0xef,
	0x68, 0x6a, 0x5a, 0xd3, 0xbc, 0x73, 0x67, 0xc3, 0xb2, 0xfc, 0xff, 0x1a, 0x96, 0xf6, 0xdc, 0x86,
	0xa5, 0xe6, 0x7d, 0x98, 0xef, 0xfd, 0x15, 0x8d, 0xf7, 0xa7, 0xdb, 0x9e, 0xce, 0xe2, 0x6d, 0x8f,
	0x7b, 0x08, 0x3b, 0xd5, 0xd0, 0x90, 0x79, 0x74, 0xa4, 0xa0, 0x54, 0xc3, 0xd1, 0xc0, 0x5c, 0x54,
	0x45, 0xee, 0x31, 0xa7, 0x24, 0xf5, 0x94, 0xf3, 0xab, 0xe8, 0x06, 0xa3, 0xeb, 0x71, 0xd9, 0xf9,
	0x8a, 0xef, 0x92, 0x6d, 0x4d, 0x67, 0x22, 0x6d, 0xcb, 0x35, 0xdd, 0xef, 0x60, 0xb3, 0xcc, 0x28,
	0xbc, 0xa1, 0xfc, 0xa0, 0x0a, 0x73, 0x23, 0xf4, 0x95, 0xa7, 0x52, 0xd3, 0xdd, 0xbf, 0x0c, 0x20,
	0xd3, 0x17, 0xbd, 0xeb, 0x31, 0x33, 0x18, 0x92, 0x17, 0xad, 0x6c, 0x92, 0x87, 0x32, 0x8e, 0xf3,
	0xea, 0x62, 0x6b, 0xaa, 0x8b, 0xca, 0x89, 0x45, 0xc1, 0x6b, 0x69, 0x0b, 0xde, 0xb2, 0x5a, 0xf0,
	0xdc, 0xef, 0x61, 0x7d, 0xfa, 0x0d, 0xc9, 0x7f, 0x43, 0x36, 0x52, 0xce, 0xe2, 0xe1, 0x38, 0x07,
	0x10, 0x3d, 0x55, 0xe6, 0xc6, 0x5b, 0x5a, 0xe3, 0x1b, 0x15, 0xe3, 0x8f, 0x60, 0x43, 0x73, 0x61,
	0x42, 0x9e, 0xd4, 0xad, 0xef, 0xe9, 0xfa, 0xd0, 0xba, 0xf9, 0xcf, 0x14, 0x77, 0x8a, 0x12, 0xef,
	0xd1, 0x41, 0x09, 0xb1, 0x51, 0x87, 0x98, 0xbb, 0xc7, 0x2c, 0xdd, 0x53, 0x81, 0xb2, 0xd8, 0xbf,
	0x08, 0x94, 0x85, 0x72, 0x69, 0xcb, 0x9f, 0x06, 0x6c, 0xe9, 0xfb, 0x0d, 0x72, 0x08, 0xad, 0x4b,
	0x31, 0x94, 0xe7, 0x3d, 0xbc, 0xb3, 0x3f, 0xd9, 0x95, 0xbf, 0xf2, 0xdb, 0x4f, 0x6e, 0xed, 0xfd,
	0x08, 0x1d, 0x75, 0x41, 0xf3, 0x45, 0xb2, 0x57, 0xfd, 0x22, 0xe9, 0xcd, 0xb4, 0xba, 0xf2, 0x55,
	0xf2, 0x05, 0xf4, 0xaa, 0xc9, 0x9a, 0x93, 0x29, 0x7e, 0x1f, 0x3a, 0xd0, 0xe2, 0x5d, 0x01, 0x4d,
	0x04, 0x16, 0x6d, 0x2f, 0x9f, 0x5e, 0x36, 0xf1, 0xdf, 0x8e, 0xc7, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xf4, 0xd4, 0x4c, 0x2b, 0x00, 0x11, 0x00, 0x00,
}
