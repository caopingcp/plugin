// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types2 "github.com/33cn/chain33/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GameStartReq struct {
	Round int64 `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
}

func (m *GameStartReq) Reset()                    { *m = GameStartReq{} }
func (m *GameStartReq) String() string            { return proto.CompactTextString(m) }
func (*GameStartReq) ProtoMessage()               {}
func (*GameStartReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GameStartReq) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type GameDrawReq struct {
	Round int64 `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
}

func (m *GameDrawReq) Reset()                    { *m = GameDrawReq{} }
func (m *GameDrawReq) String() string            { return proto.CompactTextString(m) }
func (*GameDrawReq) ProtoMessage()               {}
func (*GameDrawReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GameDrawReq) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type KeyInfoQueryReq struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Round int64  `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
}

func (m *KeyInfoQueryReq) Reset()                    { *m = KeyInfoQueryReq{} }
func (m *KeyInfoQueryReq) String() string            { return proto.CompactTextString(m) }
func (*KeyInfoQueryReq) ProtoMessage()               {}
func (*KeyInfoQueryReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *KeyInfoQueryReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *KeyInfoQueryReq) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type RoundInfoQueryReq struct {
	Round int64 `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
}

func (m *RoundInfoQueryReq) Reset()                    { *m = RoundInfoQueryReq{} }
func (m *RoundInfoQueryReq) String() string            { return proto.CompactTextString(m) }
func (*RoundInfoQueryReq) ProtoMessage()               {}
func (*RoundInfoQueryReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RoundInfoQueryReq) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func init() {
	proto.RegisterType((*GameStartReq)(nil), "types.GameStartReq")
	proto.RegisterType((*GameDrawReq)(nil), "types.GameDrawReq")
	proto.RegisterType((*KeyInfoQueryReq)(nil), "types.KeyInfoQueryReq")
	proto.RegisterType((*RoundInfoQueryReq)(nil), "types.RoundInfoQueryReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for F3D service

type F3DClient interface {
	Start(ctx context.Context, in *F3DStart, opts ...grpc.CallOption) (*types2.UnsignTx, error)
	LuckyDraw(ctx context.Context, in *F3DLuckyDraw, opts ...grpc.CallOption) (*types2.UnsignTx, error)
}

type f3DClient struct {
	cc *grpc.ClientConn
}

func NewF3DClient(cc *grpc.ClientConn) F3DClient {
	return &f3DClient{cc}
}

func (c *f3DClient) Start(ctx context.Context, in *F3DStart, opts ...grpc.CallOption) (*types2.UnsignTx, error) {
	out := new(types2.UnsignTx)
	err := grpc.Invoke(ctx, "/types.f3d/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *f3DClient) LuckyDraw(ctx context.Context, in *F3DLuckyDraw, opts ...grpc.CallOption) (*types2.UnsignTx, error) {
	out := new(types2.UnsignTx)
	err := grpc.Invoke(ctx, "/types.f3d/LuckyDraw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for F3D service

type F3DServer interface {
	Start(context.Context, *F3DStart) (*types2.UnsignTx, error)
	LuckyDraw(context.Context, *F3DLuckyDraw) (*types2.UnsignTx, error)
}

func RegisterF3DServer(s *grpc.Server, srv F3DServer) {
	s.RegisterService(&_F3D_serviceDesc, srv)
}

func _F3D_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(F3DStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(F3DServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.f3d/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(F3DServer).Start(ctx, req.(*F3DStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _F3D_LuckyDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(F3DLuckyDraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(F3DServer).LuckyDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.f3d/LuckyDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(F3DServer).LuckyDraw(ctx, req.(*F3DLuckyDraw))
	}
	return interceptor(ctx, in, info, handler)
}

var _F3D_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.f3d",
	HandlerType: (*F3DServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _F3D_Start_Handler,
		},
		{
			MethodName: "LuckyDraw",
			Handler:    _F3D_LuckyDraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0x12, 0x2c, 0x29,
	0x4a, 0xcc, 0x2b, 0x4e, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x83, 0xc8, 0x48, 0x71, 0xa6, 0x19, 0xa7,
	0x40, 0x98, 0x4a, 0x2a, 0x5c, 0x3c, 0xee, 0x89, 0xb9, 0xa9, 0xc1, 0x25, 0x89, 0x45, 0x25, 0x41,
	0xa9, 0x85, 0x42, 0x22, 0x5c, 0xac, 0x45, 0xf9, 0xa5, 0x79, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0xcc, 0x41, 0x10, 0x8e, 0x92, 0x32, 0x17, 0x37, 0x48, 0x95, 0x4b, 0x51, 0x62, 0x39, 0x6e, 0x45,
	0xd6, 0x5c, 0xfc, 0xde, 0xa9, 0x95, 0x9e, 0x79, 0x69, 0xf9, 0x81, 0xa5, 0xa9, 0x45, 0x95, 0x20,
	0x85, 0x42, 0x5c, 0x2c, 0x89, 0x29, 0x29, 0x45, 0x60, 0x75, 0x9c, 0x41, 0x60, 0x36, 0x42, 0x33,
	0x13, 0xb2, 0x66, 0x4d, 0x2e, 0xc1, 0x20, 0x10, 0x03, 0x45, 0x3b, 0x56, 0x7b, 0x8c, 0xd2, 0xb9,
	0x98, 0xd3, 0x8c, 0x53, 0x84, 0xb4, 0xb9, 0x58, 0xc1, 0xae, 0x16, 0xe2, 0xd7, 0x03, 0x7b, 0x54,
	0xcf, 0xcd, 0x38, 0x05, 0x2c, 0x20, 0x05, 0x13, 0x08, 0xcd, 0x2b, 0xce, 0x4c, 0xcf, 0x0b, 0xa9,
	0x50, 0x62, 0x10, 0x32, 0xe6, 0xe2, 0xf4, 0x29, 0x4d, 0xce, 0xae, 0x04, 0xf9, 0x40, 0x48, 0x18,
	0xa1, 0x01, 0x2e, 0x88, 0x45, 0x53, 0x12, 0x1b, 0x38, 0x88, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x12, 0x0f, 0x32, 0xd8, 0x54, 0x01, 0x00, 0x00,
}
