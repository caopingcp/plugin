// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flucky.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	flucky.proto

It has these top-level messages:
	BetReq
	BetRes
	BonusInfo
	BetInfo
	FluckyAction
	FluckyBet
	QueryBetInfoBatch
	QueryBetInfo
	QueryBetTimes
	QueryBonusInfo
	ReplyBetInfo
	ReplyBetInfoBatch
	ReplyBetTimes
	ReplyBonusInfo
	ReceiptFlucky
	FluckyCfg
	Rule
	BetTime
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types2 "github.com/33cn/chain33/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BetReq struct {
	Index int64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
}

func (m *BetReq) Reset()                    { *m = BetReq{} }
func (m *BetReq) String() string            { return proto.CompactTextString(m) }
func (*BetReq) ProtoMessage()               {}
func (*BetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BetReq) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type BetRes struct {
}

func (m *BetRes) Reset()                    { *m = BetRes{} }
func (m *BetRes) String() string            { return proto.CompactTextString(m) }
func (*BetRes) ProtoMessage()               {}
func (*BetRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BonusInfo struct {
	UserCount int32   `protobuf:"varint,1,opt,name=userCount" json:"userCount,omitempty"`
	BonusPool float32 `protobuf:"fixed32,2,opt,name=bonusPool" json:"bonusPool,omitempty"`
}

func (m *BonusInfo) Reset()                    { *m = BonusInfo{} }
func (m *BonusInfo) String() string            { return proto.CompactTextString(m) }
func (*BonusInfo) ProtoMessage()               {}
func (*BonusInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BonusInfo) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *BonusInfo) GetBonusPool() float32 {
	if m != nil {
		return m.BonusPool
	}
	return 0
}

type BetInfo struct {
	Index   int64   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Addr    string  `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Time    uint64  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Amount  int64   `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	RandNum []int64 `protobuf:"varint,5,rep,packed,name=randNum" json:"randNum,omitempty"`
	MaxNum  int64   `protobuf:"varint,6,opt,name=maxNum" json:"maxNum,omitempty"`
	Bonus   float32 `protobuf:"fixed32,7,opt,name=bonus" json:"bonus,omitempty"`
}

func (m *BetInfo) Reset()                    { *m = BetInfo{} }
func (m *BetInfo) String() string            { return proto.CompactTextString(m) }
func (*BetInfo) ProtoMessage()               {}
func (*BetInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BetInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BetInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *BetInfo) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BetInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BetInfo) GetRandNum() []int64 {
	if m != nil {
		return m.RandNum
	}
	return nil
}

func (m *BetInfo) GetMaxNum() int64 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

func (m *BetInfo) GetBonus() float32 {
	if m != nil {
		return m.Bonus
	}
	return 0
}

type FluckyAction struct {
	// Types that are valid to be assigned to Value:
	//	*FluckyAction_Bet
	Value isFluckyAction_Value `protobuf_oneof:"value"`
	Ty    int32                `protobuf:"varint,6,opt,name=ty" json:"ty,omitempty"`
}

func (m *FluckyAction) Reset()                    { *m = FluckyAction{} }
func (m *FluckyAction) String() string            { return proto.CompactTextString(m) }
func (*FluckyAction) ProtoMessage()               {}
func (*FluckyAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isFluckyAction_Value interface {
	isFluckyAction_Value()
}

type FluckyAction_Bet struct {
	Bet *FluckyBet `protobuf:"bytes,1,opt,name=bet,oneof"`
}

func (*FluckyAction_Bet) isFluckyAction_Value() {}

func (m *FluckyAction) GetValue() isFluckyAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FluckyAction) GetBet() *FluckyBet {
	if x, ok := m.GetValue().(*FluckyAction_Bet); ok {
		return x.Bet
	}
	return nil
}

func (m *FluckyAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FluckyAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FluckyAction_OneofMarshaler, _FluckyAction_OneofUnmarshaler, _FluckyAction_OneofSizer, []interface{}{
		(*FluckyAction_Bet)(nil),
	}
}

func _FluckyAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FluckyAction)
	// value
	switch x := m.Value.(type) {
	case *FluckyAction_Bet:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FluckyAction.Value has unexpected type %T", x)
	}
	return nil
}

func _FluckyAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FluckyAction)
	switch tag {
	case 1: // value.bet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FluckyBet)
		err := b.DecodeMessage(msg)
		m.Value = &FluckyAction_Bet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FluckyAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FluckyAction)
	// value
	switch x := m.Value.(type) {
	case *FluckyAction_Bet:
		s := proto.Size(x.Bet)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FluckyBet struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *FluckyBet) Reset()                    { *m = FluckyBet{} }
func (m *FluckyBet) String() string            { return proto.CompactTextString(m) }
func (*FluckyBet) ProtoMessage()               {}
func (*FluckyBet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FluckyBet) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryBetInfoBatch struct {
	Addr      string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Index     int64  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Count     int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
}

func (m *QueryBetInfoBatch) Reset()                    { *m = QueryBetInfoBatch{} }
func (m *QueryBetInfoBatch) String() string            { return proto.CompactTextString(m) }
func (*QueryBetInfoBatch) ProtoMessage()               {}
func (*QueryBetInfoBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryBetInfoBatch) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *QueryBetInfoBatch) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryBetInfoBatch) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryBetInfoBatch) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type QueryBetInfo struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Idx  int64  `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
}

func (m *QueryBetInfo) Reset()                    { *m = QueryBetInfo{} }
func (m *QueryBetInfo) String() string            { return proto.CompactTextString(m) }
func (*QueryBetInfo) ProtoMessage()               {}
func (*QueryBetInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueryBetInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *QueryBetInfo) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

type QueryBetTimes struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *QueryBetTimes) Reset()                    { *m = QueryBetTimes{} }
func (m *QueryBetTimes) String() string            { return proto.CompactTextString(m) }
func (*QueryBetTimes) ProtoMessage()               {}
func (*QueryBetTimes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueryBetTimes) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryBonusInfo struct {
}

func (m *QueryBonusInfo) Reset()                    { *m = QueryBonusInfo{} }
func (m *QueryBonusInfo) String() string            { return proto.CompactTextString(m) }
func (*QueryBonusInfo) ProtoMessage()               {}
func (*QueryBonusInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ReplyBetInfo struct {
	Bet *BetInfo `protobuf:"bytes,1,opt,name=bet" json:"bet,omitempty"`
}

func (m *ReplyBetInfo) Reset()                    { *m = ReplyBetInfo{} }
func (m *ReplyBetInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyBetInfo) ProtoMessage()               {}
func (*ReplyBetInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReplyBetInfo) GetBet() *BetInfo {
	if m != nil {
		return m.Bet
	}
	return nil
}

type ReplyBetInfoBatch struct {
	Bets []*ReceiptFlucky `protobuf:"bytes,2,rep,name=bets" json:"bets,omitempty"`
}

func (m *ReplyBetInfoBatch) Reset()                    { *m = ReplyBetInfoBatch{} }
func (m *ReplyBetInfoBatch) String() string            { return proto.CompactTextString(m) }
func (*ReplyBetInfoBatch) ProtoMessage()               {}
func (*ReplyBetInfoBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReplyBetInfoBatch) GetBets() []*ReceiptFlucky {
	if m != nil {
		return m.Bets
	}
	return nil
}

type ReplyBetTimes struct {
	Times int32 `protobuf:"varint,1,opt,name=times" json:"times,omitempty"`
}

func (m *ReplyBetTimes) Reset()                    { *m = ReplyBetTimes{} }
func (m *ReplyBetTimes) String() string            { return proto.CompactTextString(m) }
func (*ReplyBetTimes) ProtoMessage()               {}
func (*ReplyBetTimes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReplyBetTimes) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// 奖池信息响应
type ReplyBonusInfo struct {
	UserCount int32   `protobuf:"varint,1,opt,name=userCount" json:"userCount,omitempty"`
	BonusPool float32 `protobuf:"fixed32,2,opt,name=bonusPool" json:"bonusPool,omitempty"`
}

func (m *ReplyBonusInfo) Reset()                    { *m = ReplyBonusInfo{} }
func (m *ReplyBonusInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyBonusInfo) ProtoMessage()               {}
func (*ReplyBonusInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReplyBonusInfo) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *ReplyBonusInfo) GetBonusPool() float32 {
	if m != nil {
		return m.BonusPool
	}
	return 0
}

type ReceiptFlucky struct {
	Index   int64   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Addr    string  `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Time    uint64  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Amount  int64   `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	RandNum []int64 `protobuf:"varint,5,rep,packed,name=randNum" json:"randNum,omitempty"`
	MaxNum  int64   `protobuf:"varint,6,opt,name=maxNum" json:"maxNum,omitempty"`
	Bonus   float32 `protobuf:"fixed32,7,opt,name=bonus" json:"bonus,omitempty"`
	Action  int64   `protobuf:"varint,8,opt,name=action" json:"action,omitempty"`
}

func (m *ReceiptFlucky) Reset()                    { *m = ReceiptFlucky{} }
func (m *ReceiptFlucky) String() string            { return proto.CompactTextString(m) }
func (*ReceiptFlucky) ProtoMessage()               {}
func (*ReceiptFlucky) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReceiptFlucky) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReceiptFlucky) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptFlucky) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ReceiptFlucky) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReceiptFlucky) GetRandNum() []int64 {
	if m != nil {
		return m.RandNum
	}
	return nil
}

func (m *ReceiptFlucky) GetMaxNum() int64 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

func (m *ReceiptFlucky) GetBonus() float32 {
	if m != nil {
		return m.Bonus
	}
	return 0
}

func (m *ReceiptFlucky) GetAction() int64 {
	if m != nil {
		return m.Action
	}
	return 0
}

type FluckyCfg struct {
	PlatformAddr    string     `protobuf:"bytes,1,opt,name=platformAddr" json:"platformAddr,omitempty"`
	MaxBonus        float32    `protobuf:"fixed32,2,opt,name=maxBonus" json:"maxBonus,omitempty"`
	MinBonus        float32    `protobuf:"fixed32,3,opt,name=minBonus" json:"minBonus,omitempty"`
	PlatformToBonus float32    `protobuf:"fixed32,4,opt,name=platformToBonus" json:"platformToBonus,omitempty"`
	BonusToPlatform float32    `protobuf:"fixed32,5,opt,name=bonusToPlatform" json:"bonusToPlatform,omitempty"`
	ModNum          int64      `protobuf:"varint,6,opt,name=modNum" json:"modNum,omitempty"`
	RewardRule      []*Rule    `protobuf:"bytes,7,rep,name=rewardRule" json:"rewardRule,omitempty"`
	BetTimeRule     []*BetTime `protobuf:"bytes,8,rep,name=betTimeRule" json:"betTimeRule,omitempty"`
}

func (m *FluckyCfg) Reset()                    { *m = FluckyCfg{} }
func (m *FluckyCfg) String() string            { return proto.CompactTextString(m) }
func (*FluckyCfg) ProtoMessage()               {}
func (*FluckyCfg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FluckyCfg) GetPlatformAddr() string {
	if m != nil {
		return m.PlatformAddr
	}
	return ""
}

func (m *FluckyCfg) GetMaxBonus() float32 {
	if m != nil {
		return m.MaxBonus
	}
	return 0
}

func (m *FluckyCfg) GetMinBonus() float32 {
	if m != nil {
		return m.MinBonus
	}
	return 0
}

func (m *FluckyCfg) GetPlatformToBonus() float32 {
	if m != nil {
		return m.PlatformToBonus
	}
	return 0
}

func (m *FluckyCfg) GetBonusToPlatform() float32 {
	if m != nil {
		return m.BonusToPlatform
	}
	return 0
}

func (m *FluckyCfg) GetModNum() int64 {
	if m != nil {
		return m.ModNum
	}
	return 0
}

func (m *FluckyCfg) GetRewardRule() []*Rule {
	if m != nil {
		return m.RewardRule
	}
	return nil
}

func (m *FluckyCfg) GetBetTimeRule() []*BetTime {
	if m != nil {
		return m.BetTimeRule
	}
	return nil
}

type Rule struct {
	Range   []int64 `protobuf:"varint,1,rep,packed,name=range" json:"range,omitempty"`
	Type    int32   `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Percent float32 `protobuf:"fixed32,3,opt,name=percent" json:"percent,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Rule) GetRange() []int64 {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Rule) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Rule) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type BetTime struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Times  int64 `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
}

func (m *BetTime) Reset()                    { *m = BetTime{} }
func (m *BetTime) String() string            { return proto.CompactTextString(m) }
func (*BetTime) ProtoMessage()               {}
func (*BetTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BetTime) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BetTime) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func init() {
	proto.RegisterType((*BetReq)(nil), "types.BetReq")
	proto.RegisterType((*BetRes)(nil), "types.BetRes")
	proto.RegisterType((*BonusInfo)(nil), "types.BonusInfo")
	proto.RegisterType((*BetInfo)(nil), "types.BetInfo")
	proto.RegisterType((*FluckyAction)(nil), "types.FluckyAction")
	proto.RegisterType((*FluckyBet)(nil), "types.FluckyBet")
	proto.RegisterType((*QueryBetInfoBatch)(nil), "types.QueryBetInfoBatch")
	proto.RegisterType((*QueryBetInfo)(nil), "types.QueryBetInfo")
	proto.RegisterType((*QueryBetTimes)(nil), "types.QueryBetTimes")
	proto.RegisterType((*QueryBonusInfo)(nil), "types.QueryBonusInfo")
	proto.RegisterType((*ReplyBetInfo)(nil), "types.ReplyBetInfo")
	proto.RegisterType((*ReplyBetInfoBatch)(nil), "types.ReplyBetInfoBatch")
	proto.RegisterType((*ReplyBetTimes)(nil), "types.ReplyBetTimes")
	proto.RegisterType((*ReplyBonusInfo)(nil), "types.ReplyBonusInfo")
	proto.RegisterType((*ReceiptFlucky)(nil), "types.ReceiptFlucky")
	proto.RegisterType((*FluckyCfg)(nil), "types.FluckyCfg")
	proto.RegisterType((*Rule)(nil), "types.Rule")
	proto.RegisterType((*BetTime)(nil), "types.BetTime")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Flucky service

type FluckyClient interface {
	// flucky 对外提供服务的接口
	Bet(ctx context.Context, in *FluckyBet, opts ...grpc.CallOption) (*types2.UnsignTx, error)
}

type fluckyClient struct {
	cc *grpc.ClientConn
}

func NewFluckyClient(cc *grpc.ClientConn) FluckyClient {
	return &fluckyClient{cc}
}

func (c *fluckyClient) Bet(ctx context.Context, in *FluckyBet, opts ...grpc.CallOption) (*types2.UnsignTx, error) {
	out := new(types2.UnsignTx)
	err := grpc.Invoke(ctx, "/types.flucky/Bet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Flucky service

type FluckyServer interface {
	// flucky 对外提供服务的接口
	Bet(context.Context, *FluckyBet) (*types2.UnsignTx, error)
}

func RegisterFluckyServer(s *grpc.Server, srv FluckyServer) {
	s.RegisterService(&_Flucky_serviceDesc, srv)
}

func _Flucky_Bet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FluckyBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluckyServer).Bet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.flucky/Bet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluckyServer).Bet(ctx, req.(*FluckyBet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flucky_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.flucky",
	HandlerType: (*FluckyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bet",
			Handler:    _Flucky_Bet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flucky.proto",
}

func init() { proto.RegisterFile("flucky.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xae, 0xed, 0x38, 0x97, 0x93, 0x34, 0x6d, 0x47, 0xd1, 0x2f, 0xab, 0xfa, 0x85, 0xa2, 0x29,
	0x48, 0x16, 0x48, 0x55, 0x55, 0x2a, 0xb1, 0x62, 0xd1, 0x54, 0xe2, 0x26, 0x40, 0x65, 0x14, 0x1e,
	0xc0, 0x89, 0x4f, 0x8a, 0x85, 0x6f, 0xb5, 0xc7, 0x90, 0x3c, 0x11, 0x7b, 0xde, 0x81, 0xf7, 0x42,
	0x73, 0x66, 0x9c, 0x4c, 0x4b, 0x97, 0x2c, 0xd8, 0xcd, 0x77, 0xce, 0x77, 0x2e, 0xf9, 0xe6, 0xcb,
	0x18, 0x46, 0xab, 0xb4, 0x59, 0x7e, 0xdd, 0x9c, 0x96, 0x55, 0x21, 0x0b, 0xe6, 0xcb, 0x4d, 0x89,
	0xf5, 0xf1, 0x91, 0xac, 0xa2, 0xbc, 0x8e, 0x96, 0x32, 0x29, 0x72, 0x9d, 0xe1, 0x8f, 0xa0, 0x3b,
	0x43, 0x29, 0xf0, 0x96, 0x4d, 0xc0, 0x4f, 0xf2, 0x18, 0xd7, 0x81, 0x33, 0x75, 0x42, 0x4f, 0x68,
	0xc0, 0xfb, 0x26, 0x5f, 0xf3, 0xd7, 0x30, 0x98, 0x15, 0x79, 0x53, 0xbf, 0xcd, 0x57, 0x05, 0xfb,
	0x1f, 0x06, 0x4d, 0x8d, 0xd5, 0x55, 0xd1, 0xe4, 0x92, 0x0a, 0x7c, 0xb1, 0x0b, 0xa8, 0xec, 0x42,
	0x51, 0xaf, 0x8b, 0x22, 0x0d, 0xdc, 0xa9, 0x13, 0xba, 0x62, 0x17, 0xe0, 0x3f, 0x1c, 0xe8, 0xcd,
	0x50, 0x52, 0x9f, 0x07, 0x87, 0x32, 0x06, 0x9d, 0x28, 0x8e, 0x2b, 0x2a, 0x1d, 0x08, 0x3a, 0xab,
	0x98, 0x4c, 0x32, 0x0c, 0xbc, 0xa9, 0x13, 0x76, 0x04, 0x9d, 0xd9, 0x7f, 0xd0, 0x8d, 0x32, 0x5a,
	0xa1, 0x43, 0xe5, 0x06, 0xb1, 0x00, 0x7a, 0x55, 0x94, 0xc7, 0x1f, 0x9b, 0x2c, 0xf0, 0xa7, 0x5e,
	0xe8, 0x89, 0x16, 0xaa, 0x8a, 0x2c, 0x5a, 0xab, 0x44, 0x57, 0x57, 0x68, 0xa4, 0xf6, 0xa0, 0x05,
	0x83, 0x1e, 0x6d, 0xab, 0x01, 0xff, 0x00, 0xa3, 0x57, 0x24, 0xe3, 0x25, 0x49, 0xc6, 0x1e, 0x83,
	0xb7, 0x40, 0xfd, 0x7b, 0x87, 0xe7, 0x87, 0xa7, 0x24, 0xea, 0xa9, 0x66, 0xcc, 0x50, 0xbe, 0xd9,
	0x13, 0x2a, 0xcd, 0xc6, 0xe0, 0xca, 0x0d, 0xf5, 0xf7, 0x85, 0x2b, 0x37, 0xb3, 0x1e, 0xf8, 0xdf,
	0xa2, 0xb4, 0x41, 0x7e, 0x02, 0x83, 0x2d, 0xd9, 0xda, 0xdd, 0xb1, 0x77, 0xe7, 0xb7, 0x70, 0xf4,
	0xa9, 0xc1, 0x6a, 0x63, 0x14, 0x9a, 0x45, 0x72, 0xf9, 0x65, 0x2b, 0x88, 0x63, 0x09, 0xb2, 0x95,
	0xce, 0xb5, 0xa5, 0x9b, 0x80, 0xbf, 0xa4, 0xae, 0x1e, 0xcd, 0xd7, 0x40, 0x5d, 0x48, 0x9c, 0x54,
	0x48, 0xbf, 0x82, 0xb4, 0xf2, 0xc5, 0x2e, 0xc0, 0x2f, 0x60, 0x64, 0x8f, 0x7c, 0x70, 0xda, 0x21,
	0x78, 0x49, 0xdc, 0xce, 0x52, 0x47, 0x7e, 0x02, 0xfb, 0x6d, 0xd5, 0x3c, 0xc9, 0xb0, 0x7e, 0xa8,
	0x8c, 0x1f, 0xc2, 0x58, 0x93, 0x5a, 0xe7, 0xf0, 0x33, 0x18, 0x09, 0x2c, 0xd3, 0xed, 0xb0, 0xa9,
	0xad, 0xe9, 0xd8, 0x68, 0x6a, 0x92, 0xa4, 0x27, 0x7f, 0x09, 0x47, 0x76, 0x85, 0x56, 0x24, 0x84,
	0xce, 0x02, 0x65, 0x1d, 0xb8, 0x53, 0x2f, 0x1c, 0x9e, 0x4f, 0x4c, 0x9d, 0xc0, 0x25, 0x26, 0xa5,
	0xd4, 0x2a, 0x0b, 0x62, 0xf0, 0x27, 0xb0, 0xdf, 0x96, 0xeb, 0x3d, 0x27, 0xe0, 0x2b, 0xf7, 0xd4,
	0xc6, 0xb7, 0x1a, 0xf0, 0xf7, 0x30, 0xd6, 0xb4, 0xbf, 0xe2, 0xf1, 0x5f, 0x8e, 0x9a, 0x6a, 0x2d,
	0xf3, 0x6f, 0x3b, 0x9d, 0xfa, 0x6b, 0x77, 0xf4, 0x4d, 0x7f, 0x6d, 0x8d, 0x9f, 0x6e, 0xeb, 0xd9,
	0xab, 0xd5, 0x0d, 0xe3, 0x30, 0x2a, 0xd3, 0x48, 0xae, 0x8a, 0x2a, 0xbb, 0xdc, 0xdd, 0xf4, 0x9d,
	0x18, 0x3b, 0x86, 0x7e, 0x16, 0xad, 0x49, 0x45, 0x23, 0xcb, 0x16, 0x53, 0x2e, 0xc9, 0x75, 0xce,
	0x33, 0x39, 0x83, 0x59, 0x08, 0x07, 0x6d, 0x9f, 0x79, 0xa1, 0x29, 0x1d, 0xa2, 0xdc, 0x0f, 0x2b,
	0x26, 0x2d, 0x3d, 0x2f, 0xae, 0x4d, 0x26, 0xf0, 0x35, 0xf3, 0x5e, 0x98, 0x34, 0x28, 0x62, 0x5b,
	0x03, 0x42, 0xec, 0x19, 0x40, 0x85, 0xdf, 0xa3, 0x2a, 0x16, 0x4d, 0x8a, 0x41, 0x8f, 0x2c, 0x34,
	0x6c, 0x2d, 0xd4, 0xa4, 0x28, 0xac, 0x34, 0x3b, 0x83, 0xe1, 0x42, 0x5b, 0x87, 0xd8, 0x7d, 0x62,
	0x5b, 0x46, 0xa5, 0x8c, 0x4d, 0xe1, 0xef, 0xa0, 0x43, 0x95, 0x13, 0xf0, 0xab, 0x28, 0xbf, 0xc1,
	0xc0, 0xa1, 0xab, 0xd1, 0x80, 0xae, 0x77, 0x53, 0x22, 0x89, 0xe3, 0x0b, 0x3a, 0xab, 0x6b, 0x2c,
	0xb1, 0x5a, 0xa2, 0xf9, 0xdf, 0xba, 0xa2, 0x85, 0xfc, 0x05, 0xbd, 0x95, 0xf3, 0xbb, 0x1e, 0xb8,
	0xf3, 0x62, 0xec, 0xfc, 0x6c, 0x1e, 0x02, 0x02, 0xe7, 0x17, 0xd0, 0xd5, 0x9f, 0x00, 0xf6, 0x14,
	0x3c, 0xf5, 0xe0, 0xfc, 0xf1, 0x5e, 0x1d, 0x1f, 0x98, 0xc8, 0xe7, 0xbc, 0x4e, 0x6e, 0xf2, 0xf9,
	0x9a, 0xef, 0x2d, 0xba, 0xf4, 0x55, 0x78, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x08, 0x19,
	0xc7, 0x3f, 0x06, 0x00, 0x00,
}
